{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Guitar Practice Pro\n\n## Overview\n\nGuitar Practice Pro is a full-stack web application designed to help guitarists practice and improve their skills. It provides essential practice tools including a metronome, chord library, scale reference, tuner, and practice session tracking. The application features a modern dark theme optimized for guitar practice sessions and includes both frontend tools and backend practice session management.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe frontend is built with React and TypeScript using Vite as the build tool. The application follows a component-based architecture with clear separation of concerns:\n\n- **Component Structure**: Organized into feature-specific components (metronome, chord-library, scales, tuner, practice) with shared UI components\n- **State Management**: Uses React hooks for local state and TanStack Query for server state management\n- **Routing**: Implements client-side routing with Wouter for lightweight navigation\n- **Styling**: Utilizes Tailwind CSS with a custom dark theme and shadcn/ui component library for consistent UI elements\n- **Audio Processing**: Custom audio engine for metronome clicks, reference tones, and audio analysis for the tuner\n\n### Backend Architecture\nThe backend follows a REST API pattern built with Express.js:\n\n- **API Design**: RESTful endpoints for practice sessions, goals, and chord progressions\n- **Data Validation**: Uses Zod schemas for request validation and type safety\n- **Storage Layer**: Abstract storage interface with in-memory implementation, designed for easy database integration\n- **Development Setup**: Integrated with Vite for hot reloading during development\n\n### Data Storage Solutions\nThe application uses Drizzle ORM with PostgreSQL as the target database:\n\n- **Schema Design**: Defines tables for users, practice sessions, practice goals, and chord progressions\n- **Type Safety**: Leverages Drizzle's TypeScript integration for type-safe database operations\n- **Migration Management**: Configured for schema migrations with Drizzle Kit\n- **Current Implementation**: Uses in-memory storage for development with interface designed for easy PostgreSQL integration\n\n### Authentication and Authorization\nCurrently implements a basic user system:\n\n- **User Management**: Basic user schema with username/password authentication\n- **Session Storage**: Configured for PostgreSQL session storage with connect-pg-simple\n- **Authorization**: User-scoped data access for practice sessions, goals, and progressions\n\n### Audio and Media Features\nSpecialized audio processing capabilities:\n\n- **Web Audio API**: Custom audio engine for generating metronome clicks and reference tones\n- **Tuner Functionality**: Real-time audio analysis for pitch detection and instrument tuning\n- **Audio Context Management**: Handles browser audio context lifecycle and permissions\n\n## External Dependencies\n\n### Database and ORM\n- **Neon Database**: Serverless PostgreSQL database provider (@neondatabase/serverless)\n- **Drizzle ORM**: Type-safe ORM for database operations with PostgreSQL dialect\n- **Drizzle Kit**: Database schema management and migrations\n\n### UI and Styling\n- **Radix UI**: Comprehensive component library for accessible UI primitives\n- **Tailwind CSS**: Utility-first CSS framework with custom design system\n- **Lucide React**: Icon library for consistent iconography\n- **Class Variance Authority**: Component variant management\n\n### Frontend Framework and Tools\n- **React**: Core frontend framework with TypeScript support\n- **Vite**: Build tool and development server\n- **TanStack Query**: Server state management and data fetching\n- **Wouter**: Lightweight client-side routing\n\n### Audio and Media\n- **Web Audio API**: Browser-native audio processing (no external dependencies)\n- **Media Devices API**: Microphone access for tuner functionality\n\n### Development and Build Tools\n- **TypeScript**: Type safety across the entire application\n- **ESBuild**: Fast bundling for production builds\n- **PostCSS**: CSS processing with Tailwind integration\n- **Replit Integration**: Development environment optimizations","size_bytes":4218},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertPracticeSessionSchema,\n  insertPracticeGoalSchema,\n  insertChordProgressionSchema,\n  insertPracticeScheduleSchema,\n  insertPracticeHistorySchema,\n  insertSongSchema,\n  insertSongCollectionSchema,\n  insertSongPracticeSessionSchema\n} from \"@shared/schema\";\nimport { getUncachableSpotifyClient, convertSpotifyTrackToSong, getTrackAudioFeatures } from \"./spotify\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Practice Sessions\n  app.get(\"/api/practice-sessions/:userId\", async (req, res) => {\n    try {\n      const sessions = await storage.getUserPracticeSessions(req.params.userId);\n      res.json(sessions);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch practice sessions\" });\n    }\n  });\n\n  app.post(\"/api/practice-sessions\", async (req, res) => {\n    try {\n      const validatedData = insertPracticeSessionSchema.parse(req.body);\n      const session = await storage.createPracticeSession(validatedData);\n      res.json(session);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid practice session data\" });\n    }\n  });\n\n  app.patch(\"/api/practice-sessions/:id\", async (req, res) => {\n    try {\n      const updated = await storage.updatePracticeSession(req.params.id, req.body);\n      if (!updated) {\n        return res.status(404).json({ error: \"Practice session not found\" });\n      }\n      res.json(updated);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update practice session\" });\n    }\n  });\n\n  // Practice Goals\n  app.get(\"/api/practice-goals/:userId\", async (req, res) => {\n    try {\n      const goals = await storage.getUserPracticeGoals(req.params.userId);\n      res.json(goals);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch practice goals\" });\n    }\n  });\n\n  app.post(\"/api/practice-goals\", async (req, res) => {\n    try {\n      const validatedData = insertPracticeGoalSchema.parse(req.body);\n      const goal = await storage.createPracticeGoal(validatedData);\n      res.json(goal);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid practice goal data\" });\n    }\n  });\n\n  app.patch(\"/api/practice-goals/:id\", async (req, res) => {\n    try {\n      const updated = await storage.updatePracticeGoal(req.params.id, req.body);\n      if (!updated) {\n        return res.status(404).json({ error: \"Practice goal not found\" });\n      }\n      res.json(updated);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update practice goal\" });\n    }\n  });\n\n  // Chord Progressions\n  app.get(\"/api/chord-progressions/:userId\", async (req, res) => {\n    try {\n      const progressions = await storage.getUserChordProgressions(req.params.userId);\n      res.json(progressions);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch chord progressions\" });\n    }\n  });\n\n  app.post(\"/api/chord-progressions\", async (req, res) => {\n    try {\n      const validatedData = insertChordProgressionSchema.parse(req.body);\n      const progression = await storage.createChordProgression(validatedData);\n      res.json(progression);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid chord progression data\" });\n    }\n  });\n\n  app.delete(\"/api/chord-progressions/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteChordProgression(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Chord progression not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete chord progression\" });\n    }\n  });\n\n  // Practice Schedules\n  app.get(\"/api/practice-schedules/:userId\", async (req, res) => {\n    try {\n      const schedules = await storage.getUserPracticeSchedules(req.params.userId);\n      res.json(schedules);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch practice schedules\" });\n    }\n  });\n\n  app.post(\"/api/practice-schedules\", async (req, res) => {\n    try {\n      const validatedData = insertPracticeScheduleSchema.parse(req.body);\n      const schedule = await storage.createPracticeSchedule(validatedData);\n      res.json(schedule);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid practice schedule data\" });\n    }\n  });\n\n  app.patch(\"/api/practice-schedules/:id\", async (req, res) => {\n    try {\n      const updated = await storage.updatePracticeSchedule(req.params.id, req.body);\n      if (!updated) {\n        return res.status(404).json({ error: \"Practice schedule not found\" });\n      }\n      res.json(updated);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update practice schedule\" });\n    }\n  });\n\n  app.delete(\"/api/practice-schedules/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deletePracticeSchedule(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Practice schedule not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete practice schedule\" });\n    }\n  });\n\n  // Practice History\n  app.get(\"/api/practice-history/:userId\", async (req, res) => {\n    try {\n      const { limit = 50, offset = 0 } = req.query;\n      const history = await storage.getUserPracticeHistory(\n        req.params.userId, \n        parseInt(limit as string), \n        parseInt(offset as string)\n      );\n      res.json(history);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch practice history\" });\n    }\n  });\n\n  app.post(\"/api/practice-history\", async (req, res) => {\n    try {\n      const validatedData = insertPracticeHistorySchema.parse(req.body);\n      const historyEntry = await storage.createPracticeHistoryEntry(validatedData);\n      res.json(historyEntry);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid practice history data\" });\n    }\n  });\n\n  app.get(\"/api/practice-history/:userId/stats\", async (req, res) => {\n    try {\n      const { days = 30 } = req.query;\n      const stats = await storage.getPracticeStats(req.params.userId, parseInt(days as string));\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch practice stats\" });\n    }\n  });\n\n  // Songs\n  app.get(\"/api/songs\", async (req, res) => {\n    try {\n      const { q, genre, difficulty, artist } = req.query;\n      const query = typeof q === 'string' ? q : '';\n      \n      const filters = {\n        genre: typeof genre === 'string' ? genre : undefined,\n        difficulty: typeof difficulty === 'string' ? parseInt(difficulty) : undefined,\n        artist: typeof artist === 'string' ? artist : undefined,\n      };\n      \n      const songs = await storage.searchSongs(query, filters);\n      res.json(songs);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch songs\" });\n    }\n  });\n\n  app.get(\"/api/songs/:id\", async (req, res) => {\n    try {\n      const song = await storage.getSong(req.params.id);\n      if (!song) {\n        return res.status(404).json({ error: \"Song not found\" });\n      }\n      res.json(song);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch song\" });\n    }\n  });\n\n  app.post(\"/api/songs\", async (req, res) => {\n    try {\n      const validatedData = insertSongSchema.parse(req.body);\n      const song = await storage.createSong(validatedData);\n      res.json(song);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid song data\" });\n    }\n  });\n\n  app.post(\"/api/songs/from-spotify\", async (req, res) => {\n    try {\n      const { spotifyTrack } = req.body;\n      \n      // Check if song already exists\n      const existingSong = await storage.getSongBySpotifyId(spotifyTrack.id);\n      if (existingSong) {\n        return res.status(409).json({ error: \"Song already exists in library\", song: existingSong });\n      }\n      \n      // Convert Spotify track to our song format\n      let songData = convertSpotifyTrackToSong(spotifyTrack);\n      \n      // Try to get audio features from Spotify\n      try {\n        const audioFeatures = await getTrackAudioFeatures(spotifyTrack.id);\n        songData = {\n          ...songData,\n          key: audioFeatures.key || null,\n          tempo: audioFeatures.tempo || null,\n          timeSignature: audioFeatures.timeSignature || null,\n        };\n      } catch (audioError) {\n        console.warn('Could not fetch audio features:', audioError);\n      }\n      \n      // Validate and save\n      const validatedData = insertSongSchema.parse(songData);\n      const song = await storage.createSong(validatedData);\n      res.json(song);\n    } catch (error) {\n      console.error('Error adding song from Spotify:', error);\n      res.status(400).json({ error: \"Failed to add song from Spotify\" });\n    }\n  });\n\n  app.patch(\"/api/songs/:id\", async (req, res) => {\n    try {\n      const updated = await storage.updateSong(req.params.id, req.body);\n      if (!updated) {\n        return res.status(404).json({ error: \"Song not found\" });\n      }\n      res.json(updated);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update song\" });\n    }\n  });\n\n  app.delete(\"/api/songs/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteSong(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Song not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete song\" });\n    }\n  });\n\n  // Song Collections\n  app.get(\"/api/song-collections\", async (req, res) => {\n    try {\n      const { userId } = req.query;\n      const userIdStr = typeof userId === 'string' ? userId : undefined;\n      const collections = await storage.getUserSongCollections(userIdStr);\n      res.json(collections);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch song collections\" });\n    }\n  });\n\n  app.get(\"/api/song-collections/:id\", async (req, res) => {\n    try {\n      const collection = await storage.getSongCollection(req.params.id);\n      if (!collection) {\n        return res.status(404).json({ error: \"Collection not found\" });\n      }\n      res.json(collection);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch song collection\" });\n    }\n  });\n\n  app.post(\"/api/song-collections\", async (req, res) => {\n    try {\n      console.log(\"Received POST /api/song-collections with body:\", JSON.stringify(req.body, null, 2));\n      const validatedData = insertSongCollectionSchema.parse(req.body);\n      console.log(\"Validation successful, creating collection:\", JSON.stringify(validatedData, null, 2));\n      const collection = await storage.createSongCollection(validatedData);\n      console.log(\"Collection created successfully:\", JSON.stringify(collection, null, 2));\n      res.json(collection);\n    } catch (error) {\n      console.error(\"Error creating song collection:\", error);\n      if (error instanceof Error) {\n        console.error(\"Error message:\", error.message);\n        console.error(\"Error stack:\", error.stack);\n      }\n      res.status(400).json({ error: \"Invalid song collection data\" });\n    }\n  });\n\n  app.patch(\"/api/song-collections/:id\", async (req, res) => {\n    try {\n      const updated = await storage.updateSongCollection(req.params.id, req.body);\n      if (!updated) {\n        return res.status(404).json({ error: \"Song collection not found\" });\n      }\n      res.json(updated);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update song collection\" });\n    }\n  });\n\n  app.delete(\"/api/song-collections/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteSongCollection(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Song collection not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete song collection\" });\n    }\n  });\n\n  app.post(\"/api/song-collections/:id/songs\", async (req, res) => {\n    try {\n      const { songId } = req.body;\n      const added = await storage.addSongToCollection(req.params.id, songId);\n      if (!added) {\n        return res.status(404).json({ error: \"Collection not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to add song to collection\" });\n    }\n  });\n\n  app.delete(\"/api/song-collections/:id/songs/:songId\", async (req, res) => {\n    try {\n      const removed = await storage.removeSongFromCollection(req.params.id, req.params.songId);\n      if (!removed) {\n        return res.status(404).json({ error: \"Collection not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to remove song from collection\" });\n    }\n  });\n\n  // Spotify Integration\n  app.get(\"/api/spotify/search\", async (req, res) => {\n    try {\n      const { q } = req.query;\n      if (!q || typeof q !== 'string') {\n        return res.status(400).json({ error: \"Search query required\" });\n      }\n      \n      const spotify = await getUncachableSpotifyClient();\n      const results = await spotify.search(q, ['track'], 'US', 20);\n      res.json(results);\n    } catch (error) {\n      console.error('Spotify search error:', error);\n      res.status(500).json({ error: \"Failed to search Spotify\" });\n    }\n  });\n\n  // Song Practice Sessions\n  app.get(\"/api/song-practice-sessions/:userId\", async (req, res) => {\n    try {\n      const { songId } = req.query;\n      const songIdStr = typeof songId === 'string' ? songId : undefined;\n      const sessions = await storage.getUserSongPracticeSessions(req.params.userId, songIdStr);\n      res.json(sessions);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch song practice sessions\" });\n    }\n  });\n\n  app.post(\"/api/song-practice-sessions\", async (req, res) => {\n    try {\n      const validatedData = insertSongPracticeSessionSchema.parse(req.body);\n      const session = await storage.createSongPracticeSession(validatedData);\n      res.json(session);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid song practice session data\" });\n    }\n  });\n\n  app.patch(\"/api/song-practice-sessions/:id\", async (req, res) => {\n    try {\n      const updated = await storage.updateSongPracticeSession(req.params.id, req.body);\n      if (!updated) {\n        return res.status(404).json({ error: \"Song practice session not found\" });\n      }\n      res.json(updated);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update song practice session\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":14860},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser, \n  type PracticeSession,\n  type InsertPracticeSession,\n  type PracticeGoal,\n  type InsertPracticeGoal,\n  type ChordProgression,\n  type InsertChordProgression,\n  type PracticeSchedule,\n  type InsertPracticeSchedule,\n  type PracticeHistory,\n  type InsertPracticeHistory,\n  type Song,\n  type InsertSong,\n  type SongCollection,\n  type InsertSongCollection,\n  type SongPracticeSession,\n  type InsertSongPracticeSession\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  createPracticeSession(session: InsertPracticeSession): Promise<PracticeSession>;\n  getUserPracticeSessions(userId: string): Promise<PracticeSession[]>;\n  updatePracticeSession(id: string, updates: Partial<PracticeSession>): Promise<PracticeSession | undefined>;\n  \n  createPracticeGoal(goal: InsertPracticeGoal): Promise<PracticeGoal>;\n  getUserPracticeGoals(userId: string): Promise<PracticeGoal[]>;\n  updatePracticeGoal(id: string, updates: Partial<PracticeGoal>): Promise<PracticeGoal | undefined>;\n  \n  createChordProgression(progression: InsertChordProgression): Promise<ChordProgression>;\n  getUserChordProgressions(userId: string): Promise<ChordProgression[]>;\n  deleteChordProgression(id: string): Promise<boolean>;\n  \n  createPracticeSchedule(schedule: InsertPracticeSchedule): Promise<PracticeSchedule>;\n  getUserPracticeSchedules(userId: string): Promise<PracticeSchedule[]>;\n  updatePracticeSchedule(id: string, updates: Partial<PracticeSchedule>): Promise<PracticeSchedule | undefined>;\n  deletePracticeSchedule(id: string): Promise<boolean>;\n  \n  createPracticeHistoryEntry(history: InsertPracticeHistory): Promise<PracticeHistory>;\n  getUserPracticeHistory(userId: string, limit?: number, offset?: number): Promise<PracticeHistory[]>;\n  getPracticeStats(userId: string, days: number): Promise<any>;\n  \n  // Song management\n  createSong(song: InsertSong): Promise<Song>;\n  getSong(id: string): Promise<Song | undefined>;\n  searchSongs(query: string, filters?: { genre?: string; difficulty?: number; artist?: string }): Promise<Song[]>;\n  updateSong(id: string, updates: Partial<Song>): Promise<Song | undefined>;\n  deleteSong(id: string): Promise<boolean>;\n  getSongBySpotifyId(spotifyId: string): Promise<Song | undefined>;\n  \n  // Song collection management\n  createSongCollection(collection: InsertSongCollection): Promise<SongCollection>;\n  getSongCollection(id: string): Promise<SongCollection | undefined>;\n  getUserSongCollections(userId?: string): Promise<SongCollection[]>;\n  updateSongCollection(id: string, updates: Partial<SongCollection>): Promise<SongCollection | undefined>;\n  deleteSongCollection(id: string): Promise<boolean>;\n  addSongToCollection(collectionId: string, songId: string): Promise<boolean>;\n  removeSongFromCollection(collectionId: string, songId: string): Promise<boolean>;\n  \n  // Song practice session management\n  createSongPracticeSession(session: InsertSongPracticeSession): Promise<SongPracticeSession>;\n  getUserSongPracticeSessions(userId: string, songId?: string): Promise<SongPracticeSession[]>;\n  updateSongPracticeSession(id: string, updates: Partial<SongPracticeSession>): Promise<SongPracticeSession | undefined>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private practiceSessions: Map<string, PracticeSession>;\n  private practiceGoals: Map<string, PracticeGoal>;\n  private chordProgressions: Map<string, ChordProgression>;\n  private practiceSchedules: Map<string, PracticeSchedule>;\n  private practiceHistory: Map<string, PracticeHistory>;\n  private songs: Map<string, Song>;\n  private songCollections: Map<string, SongCollection>;\n  private songPracticeSessions: Map<string, SongPracticeSession>;\n\n  constructor() {\n    this.users = new Map();\n    this.practiceSessions = new Map();\n    this.practiceGoals = new Map();\n    this.chordProgressions = new Map();\n    this.practiceSchedules = new Map();\n    this.practiceHistory = new Map();\n    this.songs = new Map();\n    this.songCollections = new Map();\n    this.songPracticeSessions = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async createPracticeSession(insertSession: InsertPracticeSession): Promise<PracticeSession> {\n    const id = randomUUID();\n    const session: PracticeSession = { \n      ...insertSession, \n      id,\n      userId: insertSession.userId || null,\n      endTime: insertSession.endTime || null,\n      completed: insertSession.completed || false\n    };\n    this.practiceSessions.set(id, session);\n    return session;\n  }\n\n  async getUserPracticeSessions(userId: string): Promise<PracticeSession[]> {\n    return Array.from(this.practiceSessions.values()).filter(\n      (session) => session.userId === userId,\n    );\n  }\n\n  async updatePracticeSession(id: string, updates: Partial<PracticeSession>): Promise<PracticeSession | undefined> {\n    const session = this.practiceSessions.get(id);\n    if (!session) return undefined;\n    \n    const updated = { ...session, ...updates };\n    this.practiceSessions.set(id, updated);\n    return updated;\n  }\n\n  async createPracticeGoal(insertGoal: InsertPracticeGoal): Promise<PracticeGoal> {\n    const id = randomUUID();\n    const goal: PracticeGoal = { \n      ...insertGoal, \n      id, \n      createdAt: new Date(),\n      userId: insertGoal.userId || null,\n      description: insertGoal.description || null,\n      progress: insertGoal.progress || 0,\n      completed: insertGoal.completed || false,\n      targetDate: insertGoal.targetDate || null\n    };\n    this.practiceGoals.set(id, goal);\n    return goal;\n  }\n\n  async getUserPracticeGoals(userId: string): Promise<PracticeGoal[]> {\n    return Array.from(this.practiceGoals.values()).filter(\n      (goal) => goal.userId === userId,\n    );\n  }\n\n  async updatePracticeGoal(id: string, updates: Partial<PracticeGoal>): Promise<PracticeGoal | undefined> {\n    const goal = this.practiceGoals.get(id);\n    if (!goal) return undefined;\n    \n    const updated = { ...goal, ...updates };\n    this.practiceGoals.set(id, updated);\n    return updated;\n  }\n\n  async createChordProgression(insertProgression: InsertChordProgression): Promise<ChordProgression> {\n    const id = randomUUID();\n    const progression: ChordProgression = { \n      ...insertProgression, \n      id, \n      createdAt: new Date(),\n      userId: insertProgression.userId || null\n    };\n    this.chordProgressions.set(id, progression);\n    return progression;\n  }\n\n  async getUserChordProgressions(userId: string): Promise<ChordProgression[]> {\n    return Array.from(this.chordProgressions.values()).filter(\n      (progression) => progression.userId === userId,\n    );\n  }\n\n  async deleteChordProgression(id: string): Promise<boolean> {\n    return this.chordProgressions.delete(id);\n  }\n\n  async createPracticeSchedule(insertSchedule: InsertPracticeSchedule): Promise<PracticeSchedule> {\n    const id = randomUUID();\n    const schedule: PracticeSchedule = { \n      ...insertSchedule, \n      id, \n      createdAt: new Date(),\n      userId: insertSchedule.userId || null,\n      isActive: insertSchedule.isActive ?? true\n    };\n    this.practiceSchedules.set(id, schedule);\n    return schedule;\n  }\n\n  async getUserPracticeSchedules(userId: string): Promise<PracticeSchedule[]> {\n    return Array.from(this.practiceSchedules.values()).filter(\n      (schedule) => schedule.userId === userId,\n    );\n  }\n\n  async updatePracticeSchedule(id: string, updates: Partial<PracticeSchedule>): Promise<PracticeSchedule | undefined> {\n    const schedule = this.practiceSchedules.get(id);\n    if (!schedule) return undefined;\n    \n    const updated = { ...schedule, ...updates };\n    this.practiceSchedules.set(id, updated);\n    return updated;\n  }\n\n  async deletePracticeSchedule(id: string): Promise<boolean> {\n    return this.practiceSchedules.delete(id);\n  }\n\n  async createPracticeHistoryEntry(insertHistory: InsertPracticeHistory): Promise<PracticeHistory> {\n    const id = randomUUID();\n    const history: PracticeHistory = { \n      ...insertHistory, \n      id, \n      createdAt: new Date(),\n      userId: insertHistory.userId || null,\n      notes: insertHistory.notes || null\n    };\n    this.practiceHistory.set(id, history);\n    return history;\n  }\n\n  async getUserPracticeHistory(userId: string, limit: number = 50, offset: number = 0): Promise<PracticeHistory[]> {\n    const userHistory = Array.from(this.practiceHistory.values())\n      .filter((history) => history.userId === userId)\n      .sort((a, b) => new Date(b.practiceDate).getTime() - new Date(a.practiceDate).getTime());\n    \n    return userHistory.slice(offset, offset + limit);\n  }\n\n  async getPracticeStats(userId: string, days: number): Promise<any> {\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - days);\n    \n    const userHistory = Array.from(this.practiceHistory.values())\n      .filter((history) => \n        history.userId === userId && \n        new Date(history.practiceDate) >= cutoffDate\n      );\n\n    const totalSessions = userHistory.length;\n    const totalMinutes = userHistory.reduce((sum, h) => sum + h.totalDuration, 0);\n    const averageCompletionRate = totalSessions > 0 \n      ? userHistory.reduce((sum, h) => sum + (h.completedExercises / h.totalExercises), 0) / totalSessions\n      : 0;\n\n    return {\n      totalSessions,\n      totalMinutes,\n      averageCompletionRate: Math.round(averageCompletionRate * 100),\n      averageSessionLength: totalSessions > 0 ? Math.round(totalMinutes / totalSessions) : 0\n    };\n  }\n\n  // Song management methods\n  async createSong(insertSong: InsertSong): Promise<Song> {\n    const id = randomUUID();\n    const song: Song = {\n      ...insertSong,\n      id,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      album: insertSong.album || null,\n      genre: insertSong.genre || null,\n      key: insertSong.key || null,\n      tempo: insertSong.tempo || null,\n      duration: insertSong.duration || null,\n      spotifyId: insertSong.spotifyId || null,\n      chordProgression: insertSong.chordProgression || null,\n      lyrics: insertSong.lyrics || null,\n      tabs: insertSong.tabs || null,\n      notes: insertSong.notes || null,\n      timeSignature: insertSong.timeSignature || \"4/4\",\n    };\n    this.songs.set(id, song);\n    return song;\n  }\n\n  async getSong(id: string): Promise<Song | undefined> {\n    return this.songs.get(id);\n  }\n\n  async searchSongs(query: string, filters?: { genre?: string; difficulty?: number; artist?: string }): Promise<Song[]> {\n    const allSongs = Array.from(this.songs.values());\n    const lowerQuery = query.toLowerCase();\n    \n    return allSongs.filter(song => {\n      // Text search\n      const matchesQuery = !query || \n        song.title.toLowerCase().includes(lowerQuery) ||\n        song.artist.toLowerCase().includes(lowerQuery) ||\n        (song.album && song.album.toLowerCase().includes(lowerQuery));\n      \n      // Filter by genre\n      const matchesGenre = !filters?.genre || song.genre === filters.genre;\n      \n      // Filter by difficulty\n      const matchesDifficulty = !filters?.difficulty || song.difficulty === filters.difficulty;\n      \n      // Filter by artist\n      const matchesArtist = !filters?.artist || song.artist.toLowerCase().includes(filters.artist.toLowerCase());\n      \n      return matchesQuery && matchesGenre && matchesDifficulty && matchesArtist;\n    });\n  }\n\n  async updateSong(id: string, updates: Partial<Song>): Promise<Song | undefined> {\n    const song = this.songs.get(id);\n    if (!song) return undefined;\n    \n    const updated = { ...song, ...updates, updatedAt: new Date() };\n    this.songs.set(id, updated);\n    return updated;\n  }\n\n  async deleteSong(id: string): Promise<boolean> {\n    return this.songs.delete(id);\n  }\n\n  async getSongBySpotifyId(spotifyId: string): Promise<Song | undefined> {\n    return Array.from(this.songs.values()).find(song => song.spotifyId === spotifyId);\n  }\n\n  // Song collection management methods\n  async createSongCollection(insertCollection: InsertSongCollection): Promise<SongCollection> {\n    const id = randomUUID();\n    const collection: SongCollection = {\n      ...insertCollection,\n      id,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      description: insertCollection.description || null,\n      category: insertCollection.category || null,\n      userId: insertCollection.userId || null,\n      isPublic: insertCollection.isPublic || false,\n    };\n    this.songCollections.set(id, collection);\n    return collection;\n  }\n\n  async getSongCollection(id: string): Promise<SongCollection | undefined> {\n    return this.songCollections.get(id);\n  }\n\n  async getUserSongCollections(userId?: string): Promise<SongCollection[]> {\n    return Array.from(this.songCollections.values()).filter(collection =>\n      userId ? collection.userId === userId || collection.isPublic : collection.isPublic\n    );\n  }\n\n  async updateSongCollection(id: string, updates: Partial<SongCollection>): Promise<SongCollection | undefined> {\n    const collection = this.songCollections.get(id);\n    if (!collection) return undefined;\n    \n    const updated = { ...collection, ...updates, updatedAt: new Date() };\n    this.songCollections.set(id, updated);\n    return updated;\n  }\n\n  async deleteSongCollection(id: string): Promise<boolean> {\n    return this.songCollections.delete(id);\n  }\n\n  async addSongToCollection(collectionId: string, songId: string): Promise<boolean> {\n    const collection = this.songCollections.get(collectionId);\n    if (!collection) return false;\n    \n    const songIds = Array.isArray(collection.songIds) ? collection.songIds : [];\n    if (!songIds.includes(songId)) {\n      songIds.push(songId);\n      await this.updateSongCollection(collectionId, { songIds });\n    }\n    return true;\n  }\n\n  async removeSongFromCollection(collectionId: string, songId: string): Promise<boolean> {\n    const collection = this.songCollections.get(collectionId);\n    if (!collection) return false;\n    \n    const songIds = Array.isArray(collection.songIds) ? collection.songIds : [];\n    const filteredIds = songIds.filter(id => id !== songId);\n    await this.updateSongCollection(collectionId, { songIds: filteredIds });\n    return true;\n  }\n\n  // Song practice session management methods\n  async createSongPracticeSession(insertSession: InsertSongPracticeSession): Promise<SongPracticeSession> {\n    const id = randomUUID();\n    const session: SongPracticeSession = {\n      ...insertSession,\n      id,\n      createdAt: new Date(),\n      tempo: insertSession.tempo || null,\n      sections: insertSession.sections || null,\n      notes: insertSession.notes || null,\n      rating: insertSession.rating || null,\n      completed: insertSession.completed || true,\n    };\n    this.songPracticeSessions.set(id, session);\n    return session;\n  }\n\n  async getUserSongPracticeSessions(userId: string, songId?: string): Promise<SongPracticeSession[]> {\n    return Array.from(this.songPracticeSessions.values()).filter(session =>\n      session.userId === userId && (!songId || session.songId === songId)\n    );\n  }\n\n  async updateSongPracticeSession(id: string, updates: Partial<SongPracticeSession>): Promise<SongPracticeSession | undefined> {\n    const session = this.songPracticeSessions.get(id);\n    if (!session) return undefined;\n    \n    const updated = { ...session, ...updates };\n    this.songPracticeSessions.set(id, updated);\n    return updated;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":16046},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, jsonb, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const practiceSession = pgTable(\"practice_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  duration: integer(\"duration\").notNull(), // in minutes\n  exercises: jsonb(\"exercises\").notNull(), // array of exercise objects\n  startTime: timestamp(\"start_time\").notNull(),\n  endTime: timestamp(\"end_time\"),\n  completed: boolean(\"completed\").default(false),\n});\n\nexport const practiceGoal = pgTable(\"practice_goals\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  progress: integer(\"progress\").default(0), // percentage 0-100\n  targetDate: timestamp(\"target_date\"),\n  completed: boolean(\"completed\").default(false),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const chordProgression = pgTable(\"chord_progressions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  name: text(\"name\").notNull(),\n  chords: jsonb(\"chords\").notNull(), // array of chord names\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const practiceSchedule = pgTable(\"practice_schedules\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  title: text(\"title\").notNull(),\n  dayOfWeek: integer(\"day_of_week\").notNull(), // 0 = Sunday, 1 = Monday, etc.\n  startTime: text(\"start_time\").notNull(), // HH:MM format\n  duration: integer(\"duration\").notNull(), // in minutes\n  exercises: jsonb(\"exercises\").notNull(), // array of exercise objects\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const practiceHistory = pgTable(\"practice_history\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  sessionTitle: text(\"session_title\").notNull(),\n  exercises: jsonb(\"exercises\").notNull(), // array of completed exercise objects\n  totalDuration: integer(\"total_duration\").notNull(), // actual time spent in minutes\n  completedExercises: integer(\"completed_exercises\").notNull(),\n  totalExercises: integer(\"total_exercises\").notNull(),\n  practiceDate: timestamp(\"practice_date\").notNull(),\n  notes: text(\"notes\"), // optional user notes about the session\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const song = pgTable(\"songs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  artist: text(\"artist\").notNull(),\n  album: text(\"album\"),\n  genre: text(\"genre\"),\n  key: text(\"key\"), // e.g., \"C\", \"Am\", \"F#\"\n  capo: integer(\"capo\").default(0),\n  tempo: integer(\"tempo\"), // BPM\n  timeSignature: text(\"time_signature\").default(\"4/4\"),\n  difficulty: integer(\"difficulty\").default(1), // 1-5 scale\n  duration: integer(\"duration\"), // song duration in seconds\n  spotifyId: text(\"spotify_id\").unique(), // Spotify track ID - unique to prevent duplicates\n  chordProgression: jsonb(\"chord_progression\"), // array of chord sections - optional initially\n  lyrics: text(\"lyrics\"),\n  tabs: text(\"tabs\"), // guitar tablature\n  notes: text(\"notes\"), // practice notes or tips\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").default(sql`now()`),\n});\n\nexport const songCollection = pgTable(\"song_collections\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  category: text(\"category\"), // \"genre\", \"difficulty\", \"artist\", \"custom\"\n  isPublic: boolean(\"is_public\").default(false),\n  userId: varchar(\"user_id\").references(() => users.id), // null for system collections\n  songIds: jsonb(\"song_ids\").notNull(), // array of song IDs\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").default(sql`now()`),\n});\n\nexport const songPracticeSession = pgTable(\"song_practice_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  songId: varchar(\"song_id\").notNull().references(() => song.id, { onDelete: \"cascade\" }),\n  practiceType: text(\"practice_type\").notNull(), // \"full_song\", \"chord_changes\", \"solo\", \"rhythm\"\n  duration: integer(\"duration\").notNull(), // actual practice time in minutes\n  tempo: integer(\"tempo\"), // practiced tempo (might differ from song tempo)\n  sections: jsonb(\"sections\"), // specific sections practiced\n  notes: text(\"notes\"),\n  rating: integer(\"rating\"), // 1-5 how well it went\n  completed: boolean(\"completed\").default(true),\n  practiceDate: timestamp(\"practice_date\").notNull(),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n});\n\nexport const insertPracticeSessionSchema = createInsertSchema(practiceSession).omit({\n  id: true,\n});\n\nexport const insertPracticeGoalSchema = createInsertSchema(practiceGoal).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertChordProgressionSchema = createInsertSchema(chordProgression).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPracticeScheduleSchema = createInsertSchema(practiceSchedule).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPracticeHistorySchema = createInsertSchema(practiceHistory).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSongSchema = createInsertSchema(song).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  difficulty: z.number().min(1, \"Difficulty must be at least 1\").max(5, \"Difficulty must be at most 5\").default(1),\n  capo: z.number().min(0, \"Capo cannot be negative\").default(0),\n  tempo: z.number().min(1, \"Tempo must be positive\").optional(),\n  duration: z.number().min(1, \"Duration must be positive\").optional(),\n});\n\nexport const insertSongCollectionSchema = createInsertSchema(songCollection).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSongPracticeSessionSchema = createInsertSchema(songPracticeSession).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  rating: z.number().min(1, \"Rating must be at least 1\").max(5, \"Rating must be at most 5\").optional(),\n  duration: z.number().min(1, \"Duration must be at least 1 minute\"),\n  tempo: z.number().min(1, \"Tempo must be positive\").optional(),\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertPracticeSession = z.infer<typeof insertPracticeSessionSchema>;\nexport type PracticeSession = typeof practiceSession.$inferSelect;\nexport type InsertPracticeGoal = z.infer<typeof insertPracticeGoalSchema>;\nexport type PracticeGoal = typeof practiceGoal.$inferSelect;\nexport type InsertChordProgression = z.infer<typeof insertChordProgressionSchema>;\nexport type ChordProgression = typeof chordProgression.$inferSelect;\nexport type InsertPracticeSchedule = z.infer<typeof insertPracticeScheduleSchema>;\nexport type PracticeSchedule = typeof practiceSchedule.$inferSelect;\nexport type InsertPracticeHistory = z.infer<typeof insertPracticeHistorySchema>;\nexport type PracticeHistory = typeof practiceHistory.$inferSelect;\nexport type InsertSong = z.infer<typeof insertSongSchema>;\nexport type Song = typeof song.$inferSelect;\nexport type InsertSongCollection = z.infer<typeof insertSongCollectionSchema>;\nexport type SongCollection = typeof songCollection.$inferSelect;\nexport type InsertSongPracticeSession = z.infer<typeof insertSongPracticeSessionSchema>;\nexport type SongPracticeSession = typeof songPracticeSession.$inferSelect;\n\n// Quick Practice Presets (client-side schema)\nexport const quickPresetExerciseSchema = z.object({\n  title: z.string().min(1, \"Exercise title is required\"),\n  duration: z.number().min(1, \"Duration must be at least 1 minute\"),\n  type: z.enum(['warmup', 'chords', 'scales', 'technique', 'theory', 'custom', 'songs', 'rhythm'])\n});\n\nexport const quickPresetSchema = z.object({\n  id: z.string(),\n  title: z.string().min(1, \"Preset title is required\"),\n  description: z.string().optional(),\n  exercises: z.array(quickPresetExerciseSchema).min(1, \"At least one exercise is required\")\n});\n\nexport type QuickPresetExercise = z.infer<typeof quickPresetExerciseSchema>;\nexport type QuickPreset = z.infer<typeof quickPresetSchema>;\nexport type InsertQuickPreset = Omit<QuickPreset, 'id'>;\n","size_bytes":9052},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/home\";\nimport SongsPage from \"@/pages/songs\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/songs\" component={SongsPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":790},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(222, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(263, 70%, 50.4%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(217, 32%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217, 32%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(217, 32%, 17.5%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 32%, 17.5%);\n  --input: hsl(217, 32%, 17.5%);\n  --ring: hsl(263, 70%, 50.4%);\n  --chart-1: hsl(263, 70%, 50.4%);\n  --chart-2: hsl(173, 58%, 39%);\n  --chart-3: hsl(197, 37%, 24%);\n  --chart-4: hsl(43, 74%, 66%);\n  --chart-5: hsl(27, 87%, 67%);\n  --radius: 0.5rem;\n  --guitar-purple: hsl(263, 70%, 50.4%);\n  --guitar-amber: hsl(43, 91%, 48%);\n  --dark-slate: hsl(222, 84%, 4.9%);\n  --dark-panel: hsl(217, 32%, 17.5%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n}\n\n.dark {\n  --background: hsl(222, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(263, 70%, 50.4%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(217, 32%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217, 32%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(217, 32%, 17.5%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 32%, 17.5%);\n  --input: hsl(217, 32%, 17.5%);\n  --ring: hsl(263, 70%, 50.4%);\n  --chart-1: hsl(263, 70%, 50.4%);\n  --chart-2: hsl(173, 58%, 39%);\n  --chart-3: hsl(197, 37%, 24%);\n  --chart-4: hsl(43, 74%, 66%);\n  --chart-5: hsl(27, 87%, 67%);\n  --guitar-purple: hsl(263, 70%, 50.4%);\n  --guitar-amber: hsl(43, 91%, 48%);\n  --dark-slate: hsl(222, 84%, 4.9%);\n  --dark-panel: hsl(217, 32%, 17.5%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-sans);\n    background-color: var(--dark-slate);\n    color: hsl(210, 40%, 98%);\n  }\n}\n\n/* Custom slider styles */\n.slider::-webkit-slider-thumb {\n  appearance: none;\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  background: var(--guitar-purple);\n  cursor: pointer;\n  border: 2px solid #fff;\n  box-shadow: 0 2px 6px rgba(0,0,0,0.2);\n}\n\n.slider::-moz-range-thumb {\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  background: var(--guitar-purple);\n  cursor: pointer;\n  border: 2px solid #fff;\n  box-shadow: 0 2px 6px rgba(0,0,0,0.2);\n}\n\n.slider::-webkit-slider-track {\n  height: 8px;\n  border-radius: 4px;\n  background: hsl(215, 25%, 27%);\n}\n\n.slider::-moz-range-track {\n  height: 8px;\n  border-radius: 4px;\n  background: hsl(215, 25%, 27%);\n}\n\n/* Fretboard styles */\n.fret-string {\n  border-bottom: 2px solid #92400e;\n}\n\n.fret-note {\n  @apply w-4 h-4 rounded-full absolute;\n  top: -8px;\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n.fret-note.root {\n  background-color: var(--guitar-amber);\n}\n\n.fret-note.scale {\n  background-color: var(--guitar-purple);\n}\n\n/* Metronome pulse animation */\n@keyframes pulse {\n  0% {\n    transform: scale(1);\n    opacity: 1;\n  }\n  50% {\n    transform: scale(1.05);\n    opacity: 0.8;\n  }\n  100% {\n    transform: scale(1);\n    opacity: 1;\n  }\n}\n\n.metronome-pulse {\n  animation: pulse 0.1s ease-in-out;\n}\n\n/* Tab content transitions */\n.tab-content {\n  transition: opacity 0.2s ease-in-out;\n}\n","size_bytes":3976},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/chord-library.tsx":{"content":"import { useState, useMemo } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Hand, Play, Trash2, Save, Plus, X } from 'lucide-react';\nimport { chordLibrary, getFilteredChords, type ChordDiagram } from '@/lib/chord-data';\nimport { audioEngine } from '@/lib/audio';\n\ninterface ChordCard {\n  chord: ChordDiagram;\n  onSelect: (chord: ChordDiagram) => void;\n}\n\nfunction ChordCard({ chord, onSelect }: ChordCard) {\n  const renderChordDiagram = () => {\n    return (\n      <div className=\"bg-slate-700 rounded p-3 mb-3\">\n        <div className=\"grid grid-cols-6 gap-1 text-xs\">\n          {/* Fret numbers */}\n          <div></div>\n          {[1, 2, 3, 4, 5].map(fret => (\n            <div key={fret} className=\"text-center text-slate-400\">{fret}</div>\n          ))}\n          \n          {/* Strings */}\n          {['E', 'A', 'D', 'G', 'B', 'e'].map((stringName, stringIndex) => (\n            <div key={stringName} className=\"contents\">\n              <div className=\"text-slate-400 text-right pr-2\">{stringName}</div>\n              {[1, 2, 3, 4, 5].map(fret => {\n                const fretValue = chord.frets[5 - stringIndex]; // Reverse order for display\n                const hasFret = fretValue === fret;\n                const isOpen = fretValue === 0 && fret === 1;\n                const isMuted = fretValue === 'x';\n                \n                return (\n                  <div key={fret} className=\"h-4 border-b border-slate-500 relative\">\n                    {hasFret && (\n                      <div className=\"w-3 h-3 bg-[#6366f1] rounded-full absolute -top-1.5 left-1/2 transform -translate-x-1/2\"></div>\n                    )}\n                    {isOpen && fret === 1 && (\n                      <div className=\"w-2 h-2 border border-[#6366f1] rounded-full absolute -top-1 left-1/2 transform -translate-x-1/2\"></div>\n                    )}\n                    {isMuted && fret === 1 && (\n                      <div className=\"text-red-400 text-xs absolute -top-2 left-1/2 transform -translate-x-1/2\">×</div>\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <Card \n      className=\"bg-slate-800 border-slate-600 hover:border-[#6366f1] transition-colors cursor-pointer\"\n      onClick={() => onSelect(chord)}\n    >\n      <CardContent className=\"p-4\">\n        <div className=\"text-center mb-3\">\n          <h3 className=\"text-lg font-bold text-white\">{chord.name}</h3>\n          <p className=\"text-sm text-slate-400\">{chord.type}</p>\n        </div>\n        {renderChordDiagram()}\n        <div className=\"text-xs text-center text-slate-400\">\n          Fingers: {chord.fingers}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default function ChordLibrary() {\n  const [keyFilter, setKeyFilter] = useState('All Keys');\n  const [typeFilter, setTypeFilter] = useState('All Types');\n  const [selectedChord, setSelectedChord] = useState<ChordDiagram | null>(null);\n  const [progression, setProgression] = useState<string[]>([]);\n\n  const filteredChords = useMemo(() => {\n    return getFilteredChords(keyFilter, typeFilter);\n  }, [keyFilter, typeFilter]);\n\n  const uniqueKeys = useMemo(() => {\n    const keys = Array.from(new Set(chordLibrary.map(chord => chord.key))).sort();\n    return ['All Keys', ...keys];\n  }, []);\n\n  const uniqueTypes = useMemo(() => {\n    const types = Array.from(new Set(chordLibrary.map(chord => chord.type))).sort();\n    return ['All Types', ...types];\n  }, []);\n\n  const addToProgression = (chord: ChordDiagram) => {\n    if (progression.length < 8) { // Limit progression length\n      setProgression([...progression, chord.name]);\n    }\n  };\n\n  const removeFromProgression = (index: number) => {\n    setProgression(progression.filter((_, i) => i !== index));\n  };\n\n  const clearProgression = () => {\n    setProgression([]);\n  };\n\n  const playProgression = () => {\n    if (progression.length > 0) {\n      audioEngine.playChordProgression(progression, 120);\n    }\n  };\n\n  const saveProgression = () => {\n    // In a real app, this would save to the backend\n    console.log('Saving progression:', progression);\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 xl:grid-cols-4 gap-8\">\n      {/* Chord Library */}\n      <div className=\"xl:col-span-3\">\n        <Card className=\"bg-dark-panel border-slate-700\">\n          <CardContent className=\"p-8\">\n            <div className=\"flex flex-col sm:flex-row sm:items-center justify-between mb-6\">\n              <h2 className=\"text-2xl font-bold text-white flex items-center\">\n                <Hand className=\"mr-3 text-[#6366f1]\" size={28} />\n                Chord Library\n              </h2>\n              <div className=\"flex items-center space-x-4 mt-4 sm:mt-0\">\n                <Select value={keyFilter} onValueChange={setKeyFilter}>\n                  <SelectTrigger className=\"w-32 bg-slate-700 border-slate-600 text-white\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent className=\"bg-slate-700 border-slate-600\">\n                    {uniqueKeys.map(key => (\n                      <SelectItem key={key} value={key} className=\"text-white hover:bg-slate-600\">\n                        {key}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                \n                <Select value={typeFilter} onValueChange={setTypeFilter}>\n                  <SelectTrigger className=\"w-40 bg-slate-700 border-slate-600 text-white\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent className=\"bg-slate-700 border-slate-600\">\n                    {uniqueTypes.map(type => (\n                      <SelectItem key={type} value={type} className=\"text-white hover:bg-slate-600\">\n                        {type}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n              {filteredChords.map((chord) => (\n                <ChordCard\n                  key={`${chord.name}-${chord.type}`}\n                  chord={chord}\n                  onSelect={addToProgression}\n                />\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Chord Progression Builder */}\n      <div className=\"space-y-6\">\n        <Card className=\"bg-dark-panel border-slate-700\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-white mb-4\">Progression Builder</h3>\n            <div className=\"space-y-3 mb-6 min-h-[200px]\">\n              {progression.length === 0 ? (\n                <div className=\"text-center text-slate-400 py-8\">\n                  Click chords to add them to your progression\n                </div>\n              ) : (\n                progression.map((chord, index) => (\n                  <div\n                    key={index}\n                    className=\"flex items-center justify-between bg-slate-800 p-3 rounded-lg border border-slate-600\"\n                  >\n                    <span className=\"text-white font-medium\">{chord}</span>\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      className=\"text-red-400 hover:text-red-300 p-1\"\n                      onClick={() => removeFromProgression(index)}\n                    >\n                      <X size={16} />\n                    </Button>\n                  </div>\n                ))\n              )}\n            </div>\n            \n            <div className=\"space-y-3\">\n              <Button\n                className=\"w-full bg-[#6366f1] hover:bg-[#6366f1]/80 text-white\"\n                onClick={playProgression}\n                disabled={progression.length === 0}\n              >\n                <Play className=\"mr-2\" size={16} />\n                Play Progression\n              </Button>\n              <Button\n                variant=\"secondary\"\n                className=\"w-full bg-slate-700 hover:bg-slate-600 text-white\"\n                onClick={clearProgression}\n                disabled={progression.length === 0}\n              >\n                <Trash2 className=\"mr-2\" size={16} />\n                Clear\n              </Button>\n              <Button\n                className=\"w-full bg-green-600 hover:bg-green-500 text-white\"\n                onClick={saveProgression}\n                disabled={progression.length === 0}\n              >\n                <Save className=\"mr-2\" size={16} />\n                Save\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Saved Progressions */}\n        <Card className=\"bg-dark-panel border-slate-700\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-white mb-4\">Saved Progressions</h3>\n            <div className=\"space-y-2\">\n              <div className=\"bg-slate-800 p-3 rounded-lg border border-slate-600 cursor-pointer hover:border-[#6366f1] transition-colors\">\n                <div className=\"text-white font-medium text-sm\">C-Am-F-G</div>\n                <div className=\"text-slate-400 text-xs\">Classic Pop</div>\n              </div>\n              <div className=\"bg-slate-800 p-3 rounded-lg border border-slate-600 cursor-pointer hover:border-[#6366f1] transition-colors\">\n                <div className=\"text-white font-medium text-sm\">Em-C-G-D</div>\n                <div className=\"text-slate-400 text-xs\">Folk Ballad</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9971},"client/src/components/header.tsx":{"content":"import { useState } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { \n  Clock, \n  Hand, \n  Music, \n  Radio, \n  ClipboardList, \n  Calendar,\n  History,\n  Menu,\n  Guitar,\n  Library\n} from 'lucide-react';\n\ninterface HeaderProps {\n  activeTab: string;\n  onTabChange: (tab: string) => void;\n}\n\nconst tabs = [\n  { id: 'metronome', label: 'Metronome', icon: Clock },\n  { id: 'chords', label: 'Chords', icon: Hand },\n  { id: 'scales', label: 'Scales', icon: Music },\n  { id: 'tuner', label: 'Tuner', icon: Radio },\n  { id: 'practice', label: 'Practice', icon: ClipboardList },\n  { id: 'schedule', label: 'Schedule', icon: Calendar },\n  { id: 'history', label: 'History', icon: History }\n];\n\nconst navigationLinks = [\n  { href: '/', label: 'Practice Tools', icon: Guitar, id: 'home' },\n  { href: '/songs', label: 'Song Library', icon: Library, id: 'songs' }\n];\n\nexport default function Header({ activeTab, onTabChange }: HeaderProps) {\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const [location] = useLocation();\n\n  return (\n    <header className=\"bg-dark-panel border-b border-slate-700 sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <Link href=\"/\">\n            <div className=\"flex items-center space-x-3 cursor-pointer\">\n              <div className=\"w-8 h-8 bg-gradient-to-r from-[#6366f1] to-[#f59e0b] rounded-lg flex items-center justify-center\">\n                <Guitar className=\"text-white text-lg\" size={20} />\n              </div>\n              <h1 className=\"text-xl font-bold text-white\">Guitar Practice Pro</h1>\n            </div>\n          </Link>\n          \n          <nav className=\"hidden md:flex space-x-1\">\n            {/* Navigation Links */}\n            {navigationLinks.map((link) => {\n              const Icon = link.icon;\n              const isActive = location === link.href;\n              return (\n                <Link key={link.id} href={link.href}>\n                  <Button\n                    variant={isActive ? \"default\" : \"ghost\"}\n                    className={`px-4 py-2 font-medium transition-colors ${\n                      isActive\n                        ? 'bg-[#6366f1] text-white hover:bg-[#6366f1]/80'\n                        : 'text-slate-300 hover:text-white hover:bg-slate-700'\n                    }`}\n                  >\n                    <Icon className=\"mr-2\" size={16} />\n                    {link.label}\n                  </Button>\n                </Link>\n              );\n            })}\n            \n            {/* Show internal tabs only on home page */}\n            {location === '/' && tabs.map((tab) => {\n              const Icon = tab.icon;\n              return (\n                <Button\n                  key={tab.id}\n                  variant={activeTab === tab.id ? \"default\" : \"ghost\"}\n                  className={`px-4 py-2 font-medium transition-colors ${\n                    activeTab === tab.id\n                      ? 'bg-[#6366f1] text-white hover:bg-[#6366f1]/80'\n                      : 'text-slate-300 hover:text-white hover:bg-slate-700'\n                  }`}\n                  onClick={() => onTabChange(tab.id)}\n                >\n                  <Icon className=\"mr-2\" size={16} />\n                  {tab.label}\n                </Button>\n              );\n            })}\n          </nav>\n\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"md:hidden p-2 text-slate-300 hover:text-white hover:bg-slate-700\"\n            onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n          >\n            <Menu size={20} />\n          </Button>\n        </div>\n      </div>\n\n      {/* Mobile Navigation */}\n      {mobileMenuOpen && (\n        <div className=\"md:hidden bg-dark-panel border-t border-slate-700\">\n          <div className=\"px-4 py-2 space-y-1\">\n            {/* Navigation Links */}\n            {navigationLinks.map((link) => {\n              const Icon = link.icon;\n              const isActive = location === link.href;\n              return (\n                <Link key={link.id} href={link.href}>\n                  <Button\n                    variant={isActive ? \"default\" : \"ghost\"}\n                    className={`w-full justify-start px-4 py-3 font-medium transition-colors ${\n                      isActive\n                        ? 'bg-[#6366f1] text-white hover:bg-[#6366f1]/80'\n                        : 'text-slate-300 hover:text-white hover:bg-slate-700'\n                    }`}\n                    onClick={() => setMobileMenuOpen(false)}\n                  >\n                    <Icon className=\"mr-2\" size={16} />\n                    {link.label}\n                  </Button>\n                </Link>\n              );\n            })}\n            \n            {/* Show internal tabs only on home page */}\n            {location === '/' && tabs.map((tab) => {\n              const Icon = tab.icon;\n              return (\n                <Button\n                  key={tab.id}\n                  variant={activeTab === tab.id ? \"default\" : \"ghost\"}\n                  className={`w-full justify-start px-4 py-3 font-medium transition-colors ${\n                    activeTab === tab.id\n                      ? 'bg-[#6366f1] text-white hover:bg-[#6366f1]/80'\n                      : 'text-slate-300 hover:text-white hover:bg-slate-700'\n                  }`}\n                  onClick={() => {\n                    onTabChange(tab.id);\n                    setMobileMenuOpen(false);\n                  }}\n                >\n                  <Icon className=\"mr-2\" size={16} />\n                  {tab.label}\n                </Button>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </header>\n  );\n}\n","size_bytes":5834},"client/src/components/metronome.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Slider } from '@/components/ui/slider';\nimport { Switch } from '@/components/ui/switch';\nimport { Clock, Play, Pause, Square, Minus, Plus } from 'lucide-react';\nimport { useMetronome } from '@/hooks/use-metronome';\n\nexport default function Metronome() {\n  const {\n    bpm,\n    isPlaying,\n    timeSignature,\n    currentBeat,\n    volume,\n    accentEnabled,\n    start,\n    stop,\n    toggle,\n    setBpm,\n    setTimeSignature,\n    setVolume,\n    setAccentEnabled\n  } = useMetronome();\n\n  const [practiceTime, setPracticeTime] = useState(0);\n  const [practiceTimer, setPracticeTimer] = useState<NodeJS.Timeout | null>(null);\n  const [pulseClass, setPulseClass] = useState('');\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const startPracticeTimer = () => {\n    if (practiceTimer) return;\n    \n    const timer = setInterval(() => {\n      setPracticeTime(prev => prev + 1);\n    }, 1000);\n    \n    setPracticeTimer(timer);\n  };\n\n  const resetPracticeTimer = () => {\n    if (practiceTimer) {\n      clearInterval(practiceTimer);\n      setPracticeTimer(null);\n    }\n    setPracticeTime(0);\n  };\n\n  const timeSignatures: [number, number][] = [\n    [4, 4], [3, 4], [2, 4], [6, 8]\n  ];\n\n  // Add visual pulse effect when metronome plays\n  useEffect(() => {\n    if (isPlaying) {\n      setPulseClass('metronome-pulse');\n      const timeout = setTimeout(() => setPulseClass(''), 100);\n      return () => clearTimeout(timeout);\n    }\n  }, [currentBeat, isPlaying]);\n\n  useEffect(() => {\n    return () => {\n      if (practiceTimer) {\n        clearInterval(practiceTimer);\n      }\n    };\n  }, [practiceTimer]);\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n      {/* Metronome Control */}\n      <div className=\"lg:col-span-2\">\n        <Card className=\"bg-dark-panel border-slate-700\">\n          <CardContent className=\"p-8\">\n            <h2 className=\"text-2xl font-bold text-white mb-6 flex items-center\">\n              <Clock className=\"mr-3 text-[#6366f1]\" size={28} />\n              Metronome\n            </h2>\n            \n            {/* BPM Display */}\n            <div className=\"text-center mb-8\">\n              <div className={`inline-flex items-center justify-center w-32 h-32 rounded-full border-4 border-[#6366f1] bg-gradient-to-r from-[#6366f1]/20 to-[#f59e0b]/20 mb-4 ${pulseClass}`}>\n                <div className=\"text-center\">\n                  <div className=\"text-4xl font-bold text-white\">{bpm}</div>\n                  <div className=\"text-sm text-slate-400\">BPM</div>\n                </div>\n              </div>\n            </div>\n\n            {/* BPM Controls */}\n            <div className=\"flex items-center justify-center space-x-4 mb-8\">\n              <Button\n                size=\"sm\"\n                variant=\"secondary\"\n                className=\"w-12 h-12 rounded-full bg-slate-700 hover:bg-slate-600\"\n                onClick={() => setBpm(bpm - 1)}\n              >\n                <Minus size={16} />\n              </Button>\n              <div className=\"flex-1 max-w-md\">\n                <Slider\n                  value={[bpm]}\n                  onValueChange={([value]) => setBpm(value)}\n                  min={60}\n                  max={200}\n                  step={1}\n                  className=\"slider\"\n                />\n              </div>\n              <Button\n                size=\"sm\"\n                variant=\"secondary\"\n                className=\"w-12 h-12 rounded-full bg-slate-700 hover:bg-slate-600\"\n                onClick={() => setBpm(bpm + 1)}\n              >\n                <Plus size={16} />\n              </Button>\n            </div>\n\n            {/* Play/Pause Controls */}\n            <div className=\"flex items-center justify-center space-x-4\">\n              <Button\n                size=\"lg\"\n                className=\"bg-[#6366f1] hover:bg-[#6366f1]/80 text-white px-8 py-4 font-semibold text-lg\"\n                onClick={toggle}\n              >\n                {isPlaying ? (\n                  <>\n                    <Pause className=\"mr-3\" size={20} />\n                    Pause\n                  </>\n                ) : (\n                  <>\n                    <Play className=\"mr-3\" size={20} />\n                    Start\n                  </>\n                )}\n              </Button>\n              <Button\n                variant=\"secondary\"\n                size=\"lg\"\n                className=\"bg-slate-700 hover:bg-slate-600 text-white px-6 py-4 font-semibold\"\n                onClick={stop}\n              >\n                <Square size={16} />\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Settings & Timer */}\n      <div className=\"space-y-6\">\n        {/* Time Signature */}\n        <Card className=\"bg-dark-panel border-slate-700\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-white mb-4\">Time Signature</h3>\n            <div className=\"grid grid-cols-2 gap-2\">\n              {timeSignatures.map((sig) => (\n                <Button\n                  key={`${sig[0]}/${sig[1]}`}\n                  variant={timeSignature[0] === sig[0] && timeSignature[1] === sig[1] ? \"default\" : \"secondary\"}\n                  className={`p-3 font-semibold transition-colors ${\n                    timeSignature[0] === sig[0] && timeSignature[1] === sig[1]\n                      ? 'bg-[#6366f1] text-white'\n                      : 'bg-slate-700 hover:bg-slate-600 text-slate-300 hover:text-white'\n                  }`}\n                  onClick={() => setTimeSignature(sig)}\n                >\n                  {sig[0]}/{sig[1]}\n                </Button>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Sound Settings */}\n        <Card className=\"bg-dark-panel border-slate-700\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-white mb-4\">Sound</h3>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-slate-300\">Volume</span>\n                <div className=\"w-24\">\n                  <Slider\n                    value={[volume * 100]}\n                    onValueChange={([value]) => setVolume(value / 100)}\n                    min={0}\n                    max={100}\n                    step={1}\n                    className=\"slider\"\n                  />\n                </div>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-slate-300\">Accent Beat</span>\n                <Switch\n                  checked={accentEnabled}\n                  onCheckedChange={setAccentEnabled}\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Practice Timer */}\n        <Card className=\"bg-dark-panel border-slate-700\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-white mb-4\">Practice Timer</h3>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-mono text-[#f59e0b] mb-3\">\n                {formatTime(practiceTime)}\n              </div>\n              <div className=\"flex space-x-2\">\n                <Button\n                  size=\"sm\"\n                  className=\"flex-1 bg-green-600 hover:bg-green-500 text-white\"\n                  onClick={startPracticeTimer}\n                  disabled={!!practiceTimer}\n                >\n                  <Play className=\"mr-1\" size={14} />\n                  Start\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant=\"secondary\"\n                  className=\"flex-1 bg-slate-700 hover:bg-slate-600 text-white\"\n                  onClick={resetPracticeTimer}\n                >\n                  Reset\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Beat Indicator */}\n        <Card className=\"bg-dark-panel border-slate-700\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-white mb-4\">Current Beat</h3>\n            <div className=\"flex justify-center space-x-2\">\n              {Array.from({ length: timeSignature[0] }, (_, i) => (\n                <div\n                  key={i}\n                  className={`w-8 h-8 rounded-full border-2 flex items-center justify-center text-sm font-semibold transition-colors ${\n                    currentBeat === i + 1\n                      ? 'border-[#6366f1] bg-[#6366f1] text-white'\n                      : 'border-slate-600 text-slate-400'\n                  }`}\n                >\n                  {i + 1}\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9176},"client/src/components/practice-history.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Progress } from '@/components/ui/progress';\nimport { \n  History, \n  Clock,\n  Target,\n  TrendingUp,\n  Calendar,\n  ChevronLeft,\n  ChevronRight,\n  Filter\n} from 'lucide-react';\n\ninterface PracticeHistoryEntry {\n  id: string;\n  sessionTitle: string;\n  exercises: any[];\n  totalDuration: number;\n  completedExercises: number;\n  totalExercises: number;\n  practiceDate: Date;\n  notes?: string;\n}\n\nconst mockHistory: PracticeHistoryEntry[] = [\n  {\n    id: '1',\n    sessionTitle: 'Morning Practice',\n    exercises: [\n      { title: 'Warm-up', duration: 5, completed: true },\n      { title: 'Chord Practice', duration: 15, completed: true },\n      { title: 'Scale Practice', duration: 10, completed: true }\n    ],\n    totalDuration: 30,\n    completedExercises: 3,\n    totalExercises: 3,\n    practiceDate: new Date(),\n    notes: 'Great session! Finally nailed the F chord transitions.'\n  },\n  {\n    id: '2',\n    sessionTitle: 'Evening Session',\n    exercises: [\n      { title: 'Technique Practice', duration: 20, completed: true },\n      { title: 'Song Practice', duration: 25, completed: false }\n    ],\n    totalDuration: 35,\n    completedExercises: 1,\n    totalExercises: 2,\n    practiceDate: new Date(Date.now() - 86400000), // Yesterday\n    notes: 'Focused on alternate picking. Need more work on \"Wonderwall\".'\n  },\n  {\n    id: '3',\n    sessionTitle: 'Weekend Practice',\n    exercises: [\n      { title: 'Scale Mastery', duration: 20, completed: true },\n      { title: 'Chord Progressions', duration: 20, completed: true },\n      { title: 'Song Learning', duration: 15, completed: true }\n    ],\n    totalDuration: 55,\n    completedExercises: 3,\n    totalExercises: 3,\n    practiceDate: new Date(Date.now() - 172800000), // 2 days ago\n  },\n  {\n    id: '4',\n    sessionTitle: 'Quick Practice',\n    exercises: [\n      { title: 'Warm-up', duration: 5, completed: true },\n      { title: 'Chord Changes', duration: 10, completed: true }\n    ],\n    totalDuration: 15,\n    completedExercises: 2,\n    totalExercises: 2,\n    practiceDate: new Date(Date.now() - 259200000), // 3 days ago\n  },\n  {\n    id: '5',\n    sessionTitle: 'Technique Focus',\n    exercises: [\n      { title: 'Alternate Picking', duration: 15, completed: true },\n      { title: 'Legato Practice', duration: 15, completed: true },\n      { title: 'String Skipping', duration: 10, completed: false }\n    ],\n    totalDuration: 30,\n    completedExercises: 2,\n    totalExercises: 3,\n    practiceDate: new Date(Date.now() - 345600000), // 4 days ago\n  }\n];\n\nconst mockStats = {\n  totalSessions: 12,\n  totalMinutes: 420,\n  averageCompletionRate: 85,\n  averageSessionLength: 35,\n  currentStreak: 5,\n  longestStreak: 8\n};\n\nexport default function PracticeHistory() {\n  const [history, setHistory] = useState(mockHistory);\n  const [filterPeriod, setFilterPeriod] = useState('week'); // week, month, all\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage] = useState(5);\n\n  const formatDate = (date: Date) => {\n    const now = new Date();\n    const diffTime = Math.abs(now.getTime() - date.getTime());\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    \n    if (diffDays === 1) return 'Today';\n    if (diffDays === 2) return 'Yesterday';\n    if (diffDays <= 7) return `${diffDays - 1} days ago`;\n    \n    return date.toLocaleDateString('en-US', { \n      month: 'short', \n      day: 'numeric',\n      year: date.getFullYear() !== now.getFullYear() ? 'numeric' : undefined\n    });\n  };\n\n  const formatDuration = (minutes: number) => {\n    if (minutes < 60) return `${minutes}m`;\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    return `${hours}h ${mins}m`;\n  };\n\n  const getCompletionRate = (completed: number, total: number) => {\n    return Math.round((completed / total) * 100);\n  };\n\n  const filteredHistory = history.filter(entry => {\n    const entryDate = new Date(entry.practiceDate);\n    const now = new Date();\n    \n    if (filterPeriod === 'week') {\n      const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n      return entryDate >= weekAgo;\n    } else if (filterPeriod === 'month') {\n      const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n      return entryDate >= monthAgo;\n    }\n    return true; // 'all'\n  });\n\n  const totalPages = Math.ceil(filteredHistory.length / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const paginatedHistory = filteredHistory.slice(startIndex, startIndex + itemsPerPage);\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <History className=\"text-[#6366f1]\" size={32} />\n          <div>\n            <h1 className=\"text-3xl font-bold text-white\">Practice History</h1>\n            <p className=\"text-slate-400\">Track your progress and review past sessions</p>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-2\">\n          <Filter className=\"text-slate-400\" size={16} />\n          <select\n            value={filterPeriod}\n            onChange={(e) => setFilterPeriod(e.target.value)}\n            className=\"bg-slate-700 border border-slate-600 text-white rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-[#6366f1]\"\n            data-testid=\"select-filter-period\"\n          >\n            <option value=\"week\">Past Week</option>\n            <option value=\"month\">Past Month</option>\n            <option value=\"all\">All Time</option>\n          </select>\n        </div>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card className=\"bg-dark-panel border-slate-700\">\n          <CardContent className=\"p-6 text-center\">\n            <div className=\"text-2xl font-bold text-[#6366f1] mb-1\">{mockStats.totalSessions}</div>\n            <div className=\"text-slate-400 text-sm\">Total Sessions</div>\n          </CardContent>\n        </Card>\n        \n        <Card className=\"bg-dark-panel border-slate-700\">\n          <CardContent className=\"p-6 text-center\">\n            <div className=\"text-2xl font-bold text-[#f59e0b] mb-1\">{formatDuration(mockStats.totalMinutes)}</div>\n            <div className=\"text-slate-400 text-sm\">Total Practice Time</div>\n          </CardContent>\n        </Card>\n        \n        <Card className=\"bg-dark-panel border-slate-700\">\n          <CardContent className=\"p-6 text-center\">\n            <div className=\"text-2xl font-bold text-green-400 mb-1\">{mockStats.averageCompletionRate}%</div>\n            <div className=\"text-slate-400 text-sm\">Avg Completion Rate</div>\n          </CardContent>\n        </Card>\n        \n        <Card className=\"bg-dark-panel border-slate-700\">\n          <CardContent className=\"p-6 text-center\">\n            <div className=\"text-2xl font-bold text-purple-400 mb-1\">{mockStats.currentStreak}</div>\n            <div className=\"text-slate-400 text-sm\">Current Streak (days)</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Practice History List */}\n      <Card className=\"bg-dark-panel border-slate-700\">\n        <CardContent className=\"p-8\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h2 className=\"text-xl font-bold text-white\">Recent Sessions</h2>\n            <div className=\"text-slate-400 text-sm\">\n              Showing {startIndex + 1}-{Math.min(startIndex + itemsPerPage, filteredHistory.length)} of {filteredHistory.length}\n            </div>\n          </div>\n          \n          <div className=\"space-y-4\">\n            {paginatedHistory.map((entry) => {\n              const completionRate = getCompletionRate(entry.completedExercises, entry.totalExercises);\n              \n              return (\n                <Card key={entry.id} className=\"bg-slate-800 border-slate-600 hover:border-slate-500 transition-colors\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start justify-between mb-4\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-3 mb-2\">\n                          <h3 className=\"text-lg font-semibold text-white\">{entry.sessionTitle}</h3>\n                          <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n                            completionRate === 100 \n                              ? 'bg-green-600/20 text-green-400' \n                              : completionRate >= 80 \n                              ? 'bg-yellow-600/20 text-yellow-400'\n                              : 'bg-red-600/20 text-red-400'\n                          }`}>\n                            {completionRate}% Complete\n                          </span>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-6 text-sm text-slate-400 mb-3\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Calendar size={14} />\n                            <span>{formatDate(entry.practiceDate)}</span>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <Clock size={14} />\n                            <span>{formatDuration(entry.totalDuration)}</span>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <Target size={14} />\n                            <span>{entry.completedExercises}/{entry.totalExercises} exercises</span>\n                          </div>\n                        </div>\n                        \n                        <div className=\"mb-3\">\n                          <div className=\"flex justify-between items-center mb-1\">\n                            <span className=\"text-slate-300 text-sm\">Session Progress</span>\n                            <span className=\"text-slate-300 text-sm\">{completionRate}%</span>\n                          </div>\n                          <Progress value={completionRate} className=\"h-2 bg-slate-700\" />\n                        </div>\n                        \n                        {entry.notes && (\n                          <div className=\"bg-slate-700/50 rounded-md p-3 mt-3\">\n                            <p className=\"text-slate-300 text-sm italic\">\"{entry.notes}\"</p>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    \n                    <div className=\"border-t border-slate-600 pt-4\">\n                      <h4 className=\"text-white font-medium mb-2\">Exercises:</h4>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2\">\n                        {entry.exercises.map((exercise, index) => (\n                          <div \n                            key={index}\n                            className={`flex items-center justify-between text-sm p-2 rounded ${\n                              exercise.completed \n                                ? 'bg-green-600/10 text-green-400' \n                                : 'bg-red-600/10 text-red-400'\n                            }`}\n                          >\n                            <span>{exercise.title}</span>\n                            <span>{formatDuration(exercise.duration)}</span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n          \n          {/* Pagination */}\n          {totalPages > 1 && (\n            <div className=\"flex items-center justify-center space-x-4 mt-8\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}\n                disabled={currentPage === 1}\n                className=\"text-slate-400 hover:text-white disabled:opacity-50\"\n                data-testid=\"button-prev-page\"\n              >\n                <ChevronLeft size={16} className=\"mr-1\" />\n                Previous\n              </Button>\n              \n              <div className=\"flex items-center space-x-2\">\n                {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => (\n                  <Button\n                    key={page}\n                    variant={page === currentPage ? \"default\" : \"ghost\"}\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(page)}\n                    className={page === currentPage \n                      ? \"bg-[#6366f1] text-white\" \n                      : \"text-slate-400 hover:text-white\"\n                    }\n                    data-testid={`button-page-${page}`}\n                  >\n                    {page}\n                  </Button>\n                ))}\n              </div>\n              \n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}\n                disabled={currentPage === totalPages}\n                className=\"text-slate-400 hover:text-white disabled:opacity-50\"\n                data-testid=\"button-next-page\"\n              >\n                Next\n                <ChevronRight size={16} className=\"ml-1\" />\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Progress Trends */}\n      <Card className=\"bg-dark-panel border-slate-700\">\n        <CardContent className=\"p-8\">\n          <div className=\"flex items-center space-x-3 mb-6\">\n            <TrendingUp className=\"text-[#6366f1]\" size={20} />\n            <h3 className=\"text-xl font-bold text-white\">Progress Trends</h3>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n            <div>\n              <h4 className=\"text-white font-medium mb-4\">Practice Consistency</h4>\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-slate-300 text-sm\">Current Streak</span>\n                  <span className=\"text-[#6366f1] font-semibold\">{mockStats.currentStreak} days</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-slate-300 text-sm\">Longest Streak</span>\n                  <span className=\"text-slate-300 font-semibold\">{mockStats.longestStreak} days</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-slate-300 text-sm\">Avg Session Length</span>\n                  <span className=\"text-slate-300 font-semibold\">{formatDuration(mockStats.averageSessionLength)}</span>\n                </div>\n              </div>\n            </div>\n            \n            <div>\n              <h4 className=\"text-white font-medium mb-4\">Recent Achievements</h4>\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center space-x-2 text-sm\">\n                  <div className=\"w-2 h-2 bg-green-400 rounded-full\"></div>\n                  <span className=\"text-slate-300\">Completed 5 perfect sessions in a row</span>\n                </div>\n                <div className=\"flex items-center space-x-2 text-sm\">\n                  <div className=\"w-2 h-2 bg-[#6366f1] rounded-full\"></div>\n                  <span className=\"text-slate-300\">Practiced for 7+ hours this week</span>\n                </div>\n                <div className=\"flex items-center space-x-2 text-sm\">\n                  <div className=\"w-2 h-2 bg-[#f59e0b] rounded-full\"></div>\n                  <span className=\"text-slate-300\">Maintained 5-day practice streak</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":16185},"client/src/components/practice-schedule.tsx":{"content":"import { useState } from 'react';\nimport { useSchedule, type ScheduledPractice } from '@/contexts/ScheduleContext';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { \n  Calendar, \n  Plus, \n  Clock,\n  Edit,\n  Trash2,\n  Power,\n  PowerOff\n} from 'lucide-react';\n\n\nconst daysOfWeek = [\n  'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'\n];\n\nexport default function PracticeSchedule() {\n  const { schedules, setSchedules } = useSchedule();\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [editingSchedule, setEditingSchedule] = useState<ScheduledPractice | null>(null);\n  const [newSchedule, setNewSchedule] = useState<{\n    title: string;\n    dayOfWeek: number;\n    startTime: string;\n    duration: number;\n    exercises: { title: string; duration: number; type?: string }[];\n  }>({\n    title: '',\n    dayOfWeek: 1,\n    startTime: '09:00',\n    duration: 30,\n    exercises: []\n  });\n\n  const toggleScheduleActive = (id: string) => {\n    setSchedules(schedules.map(schedule => \n      schedule.id === id \n        ? { ...schedule, isActive: !schedule.isActive }\n        : schedule\n    ));\n  };\n\n  const deleteSchedule = (id: string) => {\n    setSchedules(schedules.filter(schedule => schedule.id !== id));\n  };\n\n  const startEditSchedule = (schedule: ScheduledPractice) => {\n    setEditingSchedule(schedule);\n    setNewSchedule({\n      title: schedule.title,\n      dayOfWeek: schedule.dayOfWeek,\n      startTime: schedule.startTime,\n      duration: schedule.duration,\n      exercises: schedule.exercises\n    });\n  };\n\n  const updateSchedule = () => {\n    if (editingSchedule && newSchedule.title.trim()) {\n      setSchedules(schedules.map(schedule => \n        schedule.id === editingSchedule.id \n          ? {\n              ...editingSchedule,\n              ...newSchedule,\n              exercises: [\n                { title: 'Practice Session', duration: newSchedule.duration }\n              ]\n            }\n          : schedule\n      ));\n      setEditingSchedule(null);\n      setNewSchedule({ title: '', dayOfWeek: 1, startTime: '09:00', duration: 30, exercises: [] });\n    }\n  };\n\n  const cancelEdit = () => {\n    setEditingSchedule(null);\n    setNewSchedule({ title: '', dayOfWeek: 1, startTime: '09:00', duration: 30, exercises: [] });\n  };\n\n  const addSchedule = () => {\n    if (newSchedule.title.trim()) {\n      const schedule: ScheduledPractice = {\n        id: (schedules.length + 1).toString(),\n        ...newSchedule,\n        exercises: [\n          { title: 'Practice Session', duration: newSchedule.duration, type: 'custom' }\n        ],\n        isActive: true\n      };\n      setSchedules([...schedules, schedule]);\n      setNewSchedule({ title: '', dayOfWeek: 1, startTime: '09:00', duration: 30, exercises: [] });\n      setShowAddForm(false);\n    }\n  };\n\n  const formatTime = (time: string) => {\n    const [hours, minutes] = time.split(':');\n    const hour = parseInt(hours);\n    const period = hour >= 12 ? 'PM' : 'AM';\n    const displayHour = hour > 12 ? hour - 12 : hour === 0 ? 12 : hour;\n    return `${displayHour}:${minutes} ${period}`;\n  };\n\n  const getSchedulesForDay = (dayIndex: number) => {\n    return schedules.filter(schedule => schedule.dayOfWeek === dayIndex);\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <Calendar className=\"text-[#6366f1]\" size={32} />\n          <div>\n            <h1 className=\"text-3xl font-bold text-white\">Practice Schedule</h1>\n            <p className=\"text-slate-400\">Plan your weekly practice routine</p>\n          </div>\n        </div>\n        <Button\n          onClick={() => setShowAddForm(true)}\n          className=\"bg-[#6366f1] hover:bg-[#6366f1]/80 text-white\"\n          data-testid=\"button-add-schedule\"\n        >\n          <Plus className=\"mr-2\" size={16} />\n          Add Schedule\n        </Button>\n      </div>\n\n      {/* Weekly Calendar View */}\n      <Card className=\"bg-dark-panel border-slate-700\">\n        <CardContent className=\"p-8\">\n          <h2 className=\"text-xl font-bold text-white mb-6\">Weekly Schedule</h2>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-7 gap-4\">\n            {daysOfWeek.map((day, index) => {\n              const daySchedules = getSchedulesForDay(index);\n              const isToday = new Date().getDay() === index;\n              \n              return (\n                <div key={day} className={`space-y-3 ${isToday ? 'ring-2 ring-[#6366f1] rounded-lg p-3' : 'p-3'}`}>\n                  <div className=\"text-center\">\n                    <h3 className={`font-semibold ${isToday ? 'text-[#6366f1]' : 'text-white'}`}>\n                      {day}\n                    </h3>\n                    {isToday && (\n                      <span className=\"text-xs text-[#6366f1] font-medium\">Today</span>\n                    )}\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    {daySchedules.length === 0 ? (\n                      <div className=\"bg-slate-800 rounded-lg p-3 text-center text-slate-500 text-sm border-2 border-dashed border-slate-600\">\n                        No practice scheduled\n                      </div>\n                    ) : (\n                      daySchedules.map(schedule => (\n                        <Card \n                          key={schedule.id} \n                          className={`${\n                            schedule.isActive \n                              ? 'bg-slate-800 border-slate-600' \n                              : 'bg-slate-800/50 border-slate-700 opacity-60'\n                          }`}\n                        >\n                          <CardContent className=\"p-3\">\n                            <div className=\"flex items-start justify-between mb-2\">\n                              <div>\n                                <div className={`font-medium text-sm ${\n                                  schedule.isActive ? 'text-white' : 'text-slate-400'\n                                }`}>\n                                  {schedule.title}\n                                </div>\n                                <div className=\"flex items-center space-x-2 text-xs text-slate-400\">\n                                  <Clock size={12} />\n                                  <span>{formatTime(schedule.startTime)}</span>\n                                  <span>•</span>\n                                  <span>{schedule.duration}m</span>\n                                </div>\n                              </div>\n                              <div className=\"flex items-center space-x-1\">\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  className=\"h-6 w-6 p-0 text-slate-400 hover:text-white\"\n                                  onClick={() => startEditSchedule(schedule)}\n                                  data-testid={`button-edit-schedule-${schedule.id}`}\n                                >\n                                  <Edit size={12} />\n                                </Button>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  className=\"h-6 w-6 p-0 text-slate-400 hover:text-white\"\n                                  onClick={() => toggleScheduleActive(schedule.id)}\n                                  data-testid={`button-toggle-schedule-${schedule.id}`}\n                                >\n                                  {schedule.isActive ? (\n                                    <Power size={12} />\n                                  ) : (\n                                    <PowerOff size={12} />\n                                  )}\n                                </Button>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  className=\"h-6 w-6 p-0 text-red-400 hover:text-red-300\"\n                                  onClick={() => deleteSchedule(schedule.id)}\n                                  data-testid={`button-delete-schedule-${schedule.id}`}\n                                >\n                                  <Trash2 size={12} />\n                                </Button>\n                              </div>\n                            </div>\n                            <div className=\"text-xs text-slate-500\">\n                              {schedule.exercises.length} exercise{schedule.exercises.length !== 1 ? 's' : ''}\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))\n                    )}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Add/Edit Schedule Form */}\n      {(showAddForm || editingSchedule) && (\n        <Card className=\"bg-dark-panel border-slate-700\">\n          <CardContent className=\"p-8\">\n            <h3 className=\"text-xl font-bold text-white mb-6\">\n              {editingSchedule ? 'Edit Schedule' : 'Add New Schedule'}\n            </h3>\n            \n            <div className=\"space-y-6\">\n              <div>\n                <label className=\"text-slate-300 text-sm font-medium block mb-2\">Practice Title</label>\n                <input\n                  type=\"text\"\n                  value={newSchedule.title}\n                  onChange={(e) => setNewSchedule({...newSchedule, title: e.target.value})}\n                  className=\"w-full bg-slate-700 border border-slate-600 text-white rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-[#6366f1]\"\n                  placeholder=\"e.g., Morning Practice, Evening Session\"\n                  data-testid=\"input-schedule-title\"\n                />\n              </div>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div>\n                  <label className=\"text-slate-300 text-sm font-medium block mb-2\">Day of Week</label>\n                  <select\n                    value={newSchedule.dayOfWeek}\n                    onChange={(e) => setNewSchedule({...newSchedule, dayOfWeek: parseInt(e.target.value)})}\n                    className=\"w-full bg-slate-700 border border-slate-600 text-white rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-[#6366f1]\"\n                    data-testid=\"select-schedule-day\"\n                  >\n                    {daysOfWeek.map((day, index) => (\n                      <option key={index} value={index}>{day}</option>\n                    ))}\n                  </select>\n                </div>\n                \n                <div>\n                  <label className=\"text-slate-300 text-sm font-medium block mb-2\">Start Time</label>\n                  <input\n                    type=\"time\"\n                    value={newSchedule.startTime}\n                    onChange={(e) => setNewSchedule({...newSchedule, startTime: e.target.value})}\n                    className=\"w-full bg-slate-700 border border-slate-600 text-white rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-[#6366f1]\"\n                    data-testid=\"input-schedule-time\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"text-slate-300 text-sm font-medium block mb-2\">Duration (minutes)</label>\n                  <input\n                    type=\"number\"\n                    value={newSchedule.duration}\n                    onChange={(e) => setNewSchedule({...newSchedule, duration: parseInt(e.target.value) || 30})}\n                    className=\"w-full bg-slate-700 border border-slate-600 text-white rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-[#6366f1]\"\n                    min=\"5\"\n                    max=\"180\"\n                    data-testid=\"input-schedule-duration\"\n                  />\n                </div>\n              </div>\n              \n              <div className=\"flex justify-end space-x-4\">\n                <Button\n                  variant=\"ghost\"\n                  onClick={() => editingSchedule ? cancelEdit() : setShowAddForm(false)}\n                  className=\"text-slate-400 hover:text-white\"\n                  data-testid=\"button-cancel-schedule\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  onClick={editingSchedule ? updateSchedule : addSchedule}\n                  className=\"bg-[#6366f1] hover:bg-[#6366f1]/80 text-white\"\n                  data-testid=\"button-save-schedule\"\n                >\n                  {editingSchedule ? (\n                    <>\n                      <Edit className=\"mr-2\" size={16} />\n                      Update Schedule\n                    </>\n                  ) : (\n                    <>\n                      <Plus className=\"mr-2\" size={16} />\n                      Add Schedule\n                    </>\n                  )}\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Active Schedules Summary */}\n      <Card className=\"bg-dark-panel border-slate-700\">\n        <CardContent className=\"p-8\">\n          <h3 className=\"text-xl font-bold text-white mb-6\">Schedule Summary</h3>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <Card className=\"bg-slate-800 border-slate-600\">\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"text-2xl font-bold text-[#6366f1] mb-1\">\n                  {schedules.filter(s => s.isActive).length}\n                </div>\n                <div className=\"text-slate-400 text-sm\">Active Schedules</div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"bg-slate-800 border-slate-600\">\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"text-2xl font-bold text-[#f59e0b] mb-1\">\n                  {schedules.filter(s => s.isActive).reduce((sum, s) => sum + s.duration, 0)}\n                </div>\n                <div className=\"text-slate-400 text-sm\">Weekly Minutes</div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"bg-slate-800 border-slate-600\">\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"text-2xl font-bold text-green-400 mb-1\">\n                  {schedules.filter(s => s.isActive && s.dayOfWeek === new Date().getDay()).length}\n                </div>\n                <div className=\"text-slate-400 text-sm\">Today's Sessions</div>\n              </CardContent>\n            </Card>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":15024},"client/src/components/practice.tsx":{"content":"import { useState, useRef, useEffect } from 'react';\nimport { useSchedule } from '@/contexts/ScheduleContext';\nimport { useQuickPresets } from '@/hooks/use-quick-presets';\nimport type { QuickPreset } from '@shared/schema';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Progress } from '@/components/ui/progress';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { nanoid } from 'nanoid';\nimport { useToast } from '@/hooks/use-toast';\nimport { \n  ClipboardList, \n  Play, \n  Pause, \n  Square,\n  Check,\n  RotateCcw,\n  Plus,\n  Clock,\n  Calendar,\n  Target,\n  Lightbulb,\n  X,\n  Edit,\n  Trash2,\n  Settings,\n  Save\n} from 'lucide-react';\n\ninterface Exercise {\n  id: string;\n  title: string;\n  duration: number;\n  status: 'completed' | 'active' | 'pending';\n  type: string;\n}\n\n// Form validation schema for preset management\nconst presetFormSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  description: z.string().optional(),\n  exercises: z.array(z.object({\n    title: z.string().min(1, \"Exercise title is required\"),\n    duration: z.number().min(1, \"Duration must be at least 1 minute\"),\n    type: z.enum(['warmup', 'chords', 'scales', 'technique', 'theory', 'custom', 'songs', 'rhythm'])\n  })).min(1, \"At least one exercise is required\")\n});\n\ntype PresetFormData = z.infer<typeof presetFormSchema>;\n\nconst mockExercises: Exercise[] = [\n  {\n    id: '1',\n    title: 'Chord Changes - C-Am-F-G',\n    duration: 10,\n    status: 'completed',\n    type: 'chords'\n  },\n  {\n    id: '2', \n    title: 'Strumming Pattern Practice',\n    duration: 15,\n    status: 'completed',\n    type: 'rhythm'\n  },\n  {\n    id: '3',\n    title: 'C Major Scale - Position 1',\n    duration: 15,\n    status: 'active',\n    type: 'scales'\n  },\n  {\n    id: '4',\n    title: 'Fingerpicking Exercise',\n    duration: 20,\n    status: 'pending',\n    type: 'technique'\n  },\n  {\n    id: '5',\n    title: 'Song Practice - \"Wonderwall\"',\n    duration: 25,\n    status: 'pending',\n    type: 'songs'\n  }\n];\n\nconst mockStats = {\n  todayMinutes: 45,\n  weekMinutes: 180,\n  streak: 7\n};\n\nconst mockGoals = [\n  {\n    id: '1',\n    title: 'Learn \"Wonderwall\"',\n    progress: 75,\n    target: 'End of month'\n  },\n  {\n    id: '2',\n    title: 'Master F Chord',\n    progress: 45,\n    target: 'Next week'\n  }\n];\n\nconst weeklyData = [\n  { day: 'Mon', minutes: 30 },\n  { day: 'Tue', minutes: 25 },\n  { day: 'Wed', minutes: 20 },\n  { day: 'Thu', minutes: 35 },\n  { day: 'Fri', minutes: 15 },\n  { day: 'Sat', minutes: 40 },\n  { day: 'Sun', minutes: 15, inProgress: true }\n];\n\nexport default function Practice() {\n  const [exercises, setExercises] = useState(mockExercises);\n  const [sessionActive, setSessionActive] = useState(true);\n  const [sessionPaused, setSessionPaused] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [showAddExercise, setShowAddExercise] = useState(false);\n  const [newExercise, setNewExercise] = useState<{ title: string; duration: number | string; type: string }>({ title: '', duration: 10, type: 'custom' });\n  const { getTodaysSchedules } = useSchedule();\n  const { presets, createPreset, updatePreset, deletePreset } = useQuickPresets();\n  const { toast } = useToast();\n  \n  // Preset management state\n  const [showManagePresets, setShowManagePresets] = useState(false);\n  const [editingPreset, setEditingPreset] = useState<QuickPreset | null>(null);\n  const [todaysSchedules, setTodaysSchedules] = useState(() => getTodaysSchedules());\n  const durationInputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    // Update today's schedules when the component mounts or when the date changes\n    setTodaysSchedules(getTodaysSchedules());\n  }, [getTodaysSchedules]);\n\n  const completedExercises = exercises.filter(ex => ex.status === 'completed').length;\n  const totalExercises = exercises.length;\n  const sessionProgress = (completedExercises / totalExercises) * 100;\n\n  const toggleExercise = (id: string) => {\n    setExercises(exercises.map(exercise => {\n      if (exercise.id === id) {\n        if (exercise.status === 'active') {\n          return { ...exercise, status: 'completed' };\n        } else if (exercise.status === 'pending') {\n          // Start the next exercise\n          const updatedExercises = exercises.map(ex => \n            ex.status === 'active' ? { ...ex, status: 'completed' } : ex\n          );\n          return { ...exercise, status: 'active' };\n        } else if (exercise.status === 'completed') {\n          return { ...exercise, status: 'pending' };\n        }\n      }\n      return exercise;\n    }));\n  };\n\n  const startQuickSession = (preset: QuickPreset) => {\n    console.log(`Starting ${preset.title} session`);\n    // Reset to a fresh practice session with preset exercises\n    const sessionExercises: Exercise[] = preset.exercises.map((ex, index) => ({\n      id: `preset-${index + 1}`,\n      title: ex.title,\n      duration: ex.duration,\n      status: index === 0 ? 'active' : 'pending',\n      type: ex.type\n    }));\n    setExercises(sessionExercises);\n    setSessionActive(true);\n    setSessionPaused(false);\n    setCurrentTime(0);\n  };\n\n  const getSessionExercises = (type: string): Exercise[] => {\n    const baseExercises: { [key: string]: Exercise[] } = {\n      warmup: [\n        { id: '1', title: 'Finger Stretches', duration: 2, status: 'active', type: 'warmup' },\n        { id: '2', title: 'Chromatic Exercise', duration: 3, status: 'pending', type: 'warmup' }\n      ],\n      chords: [\n        { id: '1', title: 'Open Chord Practice', duration: 5, status: 'active', type: 'chords' },\n        { id: '2', title: 'Chord Transitions', duration: 5, status: 'pending', type: 'chords' },\n        { id: '3', title: 'Strumming Patterns', duration: 5, status: 'pending', type: 'chords' }\n      ],\n      scales: [\n        { id: '1', title: 'C Major Scale - Position 1', duration: 7, status: 'active', type: 'scales' },\n        { id: '2', title: 'Scale Sequences', duration: 7, status: 'pending', type: 'scales' },\n        { id: '3', title: 'Scale Applications', duration: 6, status: 'pending', type: 'scales' }\n      ],\n      technique: [\n        { id: '1', title: 'Alternate Picking', duration: 8, status: 'active', type: 'technique' },\n        { id: '2', title: 'Legato Practice', duration: 7, status: 'pending', type: 'technique' },\n        { id: '3', title: 'String Skipping', duration: 8, status: 'pending', type: 'technique' },\n        { id: '4', title: 'Vibrato Exercise', duration: 7, status: 'pending', type: 'technique' }\n      ],\n      theory: [\n        { id: '1', title: 'Circle of Fifths Study', duration: 10, status: 'active', type: 'theory' },\n        { id: '2', title: 'Interval Recognition', duration: 8, status: 'pending', type: 'theory' },\n        { id: '3', title: 'Chord Construction', duration: 12, status: 'pending', type: 'theory' },\n        { id: '4', title: 'Scale Modes Analysis', duration: 15, status: 'pending', type: 'theory' }\n      ]\n    };\n    return baseExercises[type] || mockExercises;\n  };\n\n  const continueSession = () => {\n    setSessionPaused(false);\n    setSessionActive(true);\n  };\n\n  const pauseSession = () => {\n    setSessionPaused(true);\n  };\n\n  const endSession = async () => {\n    const completedExercises = exercises.filter(ex => ex.status === 'completed').length;\n    const totalExercises = exercises.length;\n    const totalDuration = exercises.reduce((sum, ex) => \n      ex.status === 'completed' ? sum + ex.duration : sum, 0\n    );\n\n    // Save to practice history\n    try {\n      const historyEntry = {\n        userId: 'user-1', // In a real app, this would come from auth context\n        sessionTitle: getCurrentSessionTitle(),\n        exercises: exercises.map(ex => ({\n          title: ex.title,\n          duration: ex.duration,\n          completed: ex.status === 'completed',\n          type: ex.type\n        })),\n        totalDuration,\n        completedExercises,\n        totalExercises,\n        practiceDate: new Date().toISOString(),\n        notes: getSessionNotes()\n      };\n\n      // In a real app, this would be an API call\n      console.log('Saving practice session to history:', historyEntry);\n      \n      // For now, just log the completion\n      toast({\n        title: \"Session completed!\",\n        description: `${completedExercises}/${totalExercises} exercises finished in ${totalDuration} minutes.`\n      });\n      \n    } catch (error) {\n      console.error('Failed to save practice session:', error);\n    }\n\n    setSessionActive(false);\n    setSessionPaused(false);\n    // Mark current active exercise as completed\n    setExercises(exercises.map(ex => \n      ex.status === 'active' ? { ...ex, status: 'completed' } : ex\n    ));\n  };\n\n  const getCurrentSessionTitle = () => {\n    const sessionTypes = exercises.map(ex => ex.type);\n    const uniqueTypes = Array.from(new Set(sessionTypes));\n    \n    if (uniqueTypes.length === 1) {\n      const type = uniqueTypes[0];\n      return `${type.charAt(0).toUpperCase() + type.slice(1)} Practice`;\n    } else if (uniqueTypes.includes('warmup') && uniqueTypes.length === 2) {\n      const otherType = uniqueTypes.find(t => t !== 'warmup');\n      if (otherType) {\n        return `${otherType.charAt(0).toUpperCase() + otherType.slice(1)} Session`;\n      }\n      return 'Practice Session';\n    } else {\n      return 'Mixed Practice Session';\n    }\n  };\n\n  const getSessionNotes = () => {\n    const completedCount = exercises.filter(ex => ex.status === 'completed').length;\n    const totalCount = exercises.length;\n    \n    if (completedCount === totalCount) {\n      return 'Completed all exercises successfully!';\n    } else if (completedCount > totalCount * 0.8) {\n      return 'Good session with most exercises completed.';\n    } else {\n      return 'Practice session ended early.';\n    }\n  };\n\n  const loadScheduledSession = (scheduledPractice: any) => {\n    const scheduledExercises: Exercise[] = scheduledPractice.exercises.map((ex: any, index: number) => ({\n      id: `scheduled-${index + 1}`,\n      title: ex.title,\n      duration: ex.duration,\n      status: 'pending' as const,\n      type: ex.type || 'custom'\n    }));\n    \n    setExercises(scheduledExercises);\n    setSessionActive(false);\n    setSessionPaused(false);\n    setCurrentTime(0);\n  };\n\n  const saveCurrentAsPreset = () => {\n    if (exercises.length === 0) {\n      toast({\n        title: \"No exercises to save\",\n        description: \"Add some exercises to your session before saving as a preset\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    const sessionTitle = exercises.length > 1 ? 'Mixed Practice Session' : exercises[0]?.title || 'Practice Session';\n    \n    // Handle duplicate titles by adding a number suffix\n    let finalTitle = `${sessionTitle} Preset`;\n    let counter = 1;\n    while (presets.some(p => p.title === finalTitle)) {\n      finalTitle = `${sessionTitle} Preset (${counter})`;\n      counter++;\n    }\n    \n    const validExerciseTypes = ['warmup', 'chords', 'scales', 'technique', 'theory', 'custom', 'songs', 'rhythm'] as const;\n    \n    const presetData = {\n      title: finalTitle,\n      description: 'Saved from current practice session',\n      exercises: exercises.map(ex => ({\n        title: ex.title,\n        duration: ex.duration,\n        type: validExerciseTypes.includes(ex.type as any) ? ex.type as typeof validExerciseTypes[number] : 'custom'\n      }))\n    };\n    \n    try {\n      createPreset(presetData);\n      toast({\n        title: \"Preset saved successfully!\",\n        description: `\"${finalTitle}\" has been added to your Quick Start presets`\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to save preset\",\n        description: \"Please try again\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const addExercise = () => {\n    if (newExercise.title.trim()) {\n      const exercise: Exercise = {\n        id: (exercises.length + 1).toString(),\n        title: newExercise.title,\n        duration: typeof newExercise.duration === 'string' ? 10 : newExercise.duration,\n        status: 'pending',\n        type: newExercise.type\n      };\n      setExercises([...exercises, exercise]);\n      setNewExercise({ title: '', duration: 10, type: 'custom' });\n      setShowAddExercise(false);\n    }\n  };\n\n  const removeExercise = (id: string) => {\n    setExercises(exercises.filter(ex => ex.id !== id));\n  };\n\n  const getExerciseDescription = (type: string, title: string): string => {\n    const descriptions: { [key: string]: string } = {\n      'Finger Stretches': 'Gentle finger and hand stretches to prepare for practice',\n      'Chromatic Exercise': 'Play chromatic runs to warm up your fingers',\n      'Open Chord Practice': 'Practice basic open chords with clean transitions',\n      'Chord Transitions': 'Focus on smooth changes between chord shapes',\n      'Strumming Patterns': 'Practice different strumming rhythms and dynamics',\n      'C Major Scale - Position 1': 'Practice ascending and descending patterns at 80 BPM',\n      'Scale Sequences': 'Practice scale patterns in thirds, fourths, and sequences',\n      'Scale Applications': 'Apply scales to real musical contexts and improvisation',\n      'Alternate Picking': 'Focus on clean alternate picking technique',\n      'Legato Practice': 'Practice hammer-ons and pull-offs for smooth playing',\n      'String Skipping': 'Advanced technique for skipping strings accurately',\n      'Vibrato Exercise': 'Develop controlled vibrato for expression',\n      'Circle of Fifths Study': 'Learn the relationships between keys and chord progressions',\n      'Interval Recognition': 'Train your ear to identify musical intervals',\n      'Chord Construction': 'Study how chords are built from scales and intervals',\n      'Scale Modes Analysis': 'Understand the modes and their characteristic sounds'\n    };\n    return descriptions[title] || `Practice ${type} techniques with focus and precision`;\n  };\n\n  return (\n    <>\n    <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n      {/* Practice Session */}\n      <div className=\"lg:col-span-2 space-y-8\">\n        {/* Today's Scheduled Sessions */}\n        {todaysSchedules.length > 0 && (\n          <Card className=\"bg-dark-panel border-slate-700\">\n            <CardContent className=\"p-8\">\n              <h2 className=\"text-xl font-bold text-white mb-4 flex items-center\">\n                <Calendar className=\"mr-3 text-[#6366f1]\" size={24} />\n                Today's Scheduled Sessions\n              </h2>\n              <div className=\"space-y-3\">\n                {todaysSchedules.map(schedule => (\n                  <Card key={schedule.id} className=\"bg-slate-800 border-slate-600\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex-1\">\n                          <h3 className=\"font-semibold text-white mb-1\">{schedule.title}</h3>\n                          <div className=\"flex items-center space-x-4 text-slate-400 text-sm\">\n                            <div className=\"flex items-center space-x-1\">\n                              <Clock size={12} />\n                              <span>{schedule.startTime}</span>\n                            </div>\n                            <span>•</span>\n                            <span>{schedule.duration}m</span>\n                            <span>•</span>\n                            <span>{schedule.exercises.length} exercises</span>\n                          </div>\n                        </div>\n                        <Button\n                          onClick={() => loadScheduledSession(schedule)}\n                          className=\"bg-[#6366f1] hover:bg-[#6366f1]/80 text-white\"\n                          size=\"sm\"\n                          data-testid={`button-load-schedule-${schedule.id}`}\n                        >\n                          <Play className=\"mr-2\" size={14} />\n                          Load Session\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Current Session */}\n        <Card className=\"bg-dark-panel border-slate-700\">\n          <CardContent className=\"p-8\">\n            <h2 className=\"text-2xl font-bold text-white mb-6 flex items-center\">\n              <ClipboardList className=\"mr-3 text-[#6366f1]\" size={28} />\n              Today's Practice Session\n            </h2>\n\n            {/* Current Exercise */}\n            {(() => {\n              const activeExercise = exercises.find(ex => ex.status === 'active');\n              if (!activeExercise && sessionActive) {\n                return (\n                  <Card className=\"bg-slate-800 border-slate-600 mb-6\">\n                    <CardContent className=\"p-6 text-center\">\n                      <h3 className=\"text-lg font-semibold text-white mb-2\">Session Complete!</h3>\n                      <p className=\"text-slate-300\">All exercises finished. Great job!</p>\n                    </CardContent>\n                  </Card>\n                );\n              }\n              if (!sessionActive) {\n                return (\n                  <Card className=\"bg-slate-800 border-slate-600 mb-6\">\n                    <CardContent className=\"p-6 text-center\">\n                      <h3 className=\"text-lg font-semibold text-white mb-2\">Session Ended</h3>\n                      <p className=\"text-slate-300\">Start a new session when you're ready to practice!</p>\n                    </CardContent>\n                  </Card>\n                );\n              }\n              return (\n                <Card className=\"bg-slate-800 border-slate-600 mb-6\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <h3 className=\"text-lg font-semibold text-white\">{activeExercise?.title}</h3>\n                      <span className={`px-3 py-1 rounded-full text-sm font-semibold ${\n                        sessionPaused \n                          ? 'bg-yellow-600 text-white'\n                          : 'bg-[#f59e0b] text-slate-900'\n                      }`}>\n                        {sessionPaused ? 'Paused' : 'Active'}\n                      </span>\n                    </div>\n                    <p className=\"text-slate-300 mb-4\">\n                      {getExerciseDescription(activeExercise?.type || '', activeExercise?.title || '')}\n                    </p>\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Clock className=\"text-[#6366f1]\" size={16} />\n                        <span className=\"text-slate-300 text-sm\">Duration:</span>\n                        <span className=\"text-white font-semibold\">{activeExercise?.duration} min</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-slate-300 text-sm\">BPM:</span>\n                        <span className=\"text-white font-semibold\">80</span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })()}\n\n            {/* Session Progress */}\n            <div className=\"mb-6\">\n              <div className=\"flex justify-between items-center mb-2\">\n                <h4 className=\"text-white font-medium\">Session Progress</h4>\n                <span className=\"text-slate-300 text-sm\">\n                  {completedExercises} of {totalExercises} exercises completed\n                </span>\n              </div>\n              <Progress value={sessionProgress} className=\"h-3 bg-slate-700\" />\n            </div>\n\n            {/* Exercise List */}\n            <div className=\"space-y-3 mb-8\">\n              {exercises.map((exercise) => (\n                <div\n                  key={exercise.id}\n                  className={`flex items-center justify-between rounded-lg p-4 border transition-colors ${\n                    exercise.status === 'completed'\n                      ? 'bg-slate-800 border-slate-600'\n                      : exercise.status === 'active'\n                      ? 'bg-[#6366f1]/20 border-2 border-[#6366f1]'\n                      : 'bg-slate-800 border-slate-600 opacity-50'\n                  }`}\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                      exercise.status === 'completed'\n                        ? 'bg-green-600'\n                        : exercise.status === 'active'\n                        ? 'bg-[#6366f1]'\n                        : 'bg-slate-600'\n                    }`}>\n                      {exercise.status === 'completed' ? (\n                        <Check className=\"text-white\" size={16} />\n                      ) : exercise.status === 'active' ? (\n                        <Play className=\"text-white\" size={16} />\n                      ) : (\n                        <span className=\"text-slate-400 text-sm font-bold\">\n                          {exercises.findIndex(ex => ex.id === exercise.id) + 1}\n                        </span>\n                      )}\n                    </div>\n                    <div>\n                      <div className={`font-medium ${\n                        exercise.status === 'pending' ? 'text-slate-300' : 'text-white'\n                      }`}>\n                        {exercise.title}\n                      </div>\n                      <div className={`text-sm ${\n                        exercise.status === 'pending' ? 'text-slate-500' : 'text-slate-400'\n                      }`}>\n                        {exercise.duration} minutes • {\n                          exercise.status === 'completed' ? 'Completed' :\n                          exercise.status === 'active' ? 'In Progress' : 'Upcoming'\n                        }\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"text-slate-400 hover:text-white\"\n                      onClick={() => toggleExercise(exercise.id)}\n                      data-testid={`button-toggle-exercise-${exercise.id}`}\n                    >\n                      {exercise.status === 'completed' ? (\n                        <RotateCcw size={16} />\n                      ) : (\n                        <Pause size={16} />\n                      )}\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"text-red-400 hover:text-red-300\"\n                      onClick={() => removeExercise(exercise.id)}\n                      data-testid={`button-remove-exercise-${exercise.id}`}\n                    >\n                      <Trash2 size={16} />\n                    </Button>\n                  </div>\n                </div>\n              ))}\n              \n              {/* Add Exercise Form */}\n              {showAddExercise ? (\n                <Card className=\"bg-slate-800 border-2 border-[#6366f1] border-dashed\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"space-y-4\">\n                      <div>\n                        <label className=\"text-slate-300 text-sm font-medium block mb-2\">Exercise Name</label>\n                        <input\n                          type=\"text\"\n                          value={newExercise.title}\n                          onChange={(e) => setNewExercise({...newExercise, title: e.target.value})}\n                          className=\"w-full bg-slate-700 border border-slate-600 text-white rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-[#6366f1]\"\n                          placeholder=\"Enter exercise name...\"\n                          data-testid=\"input-exercise-title\"\n                        />\n                      </div>\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div>\n                          <label className=\"text-slate-300 text-sm font-medium block mb-2\">Duration (minutes)</label>\n                          <input\n                            ref={durationInputRef}\n                            type=\"text\"\n                            inputMode=\"numeric\"\n                            defaultValue={newExercise.duration}\n                            onKeyDown={(e) => {\n                              // Allow backspace, delete, arrow keys, tab, enter, and numeric keys\n                              const allowedKeys = ['Backspace', 'Delete', 'ArrowLeft', 'ArrowRight', 'Tab', 'Enter'];\n                              const isNumeric = /^[0-9]$/.test(e.key);\n                              \n                              if (!allowedKeys.includes(e.key) && !isNumeric) {\n                                e.preventDefault();\n                              }\n                            }}\n                            onBlur={(e) => {\n                              const value = e.target.value;\n                              let finalValue = 10;\n                              \n                              if (value !== '' && !isNaN(parseInt(value))) {\n                                const numValue = parseInt(value);\n                                if (numValue < 1) {\n                                  finalValue = 1;\n                                } else if (numValue > 60) {\n                                  finalValue = 60;\n                                } else {\n                                  finalValue = numValue;\n                                }\n                              }\n                              \n                              setNewExercise({...newExercise, duration: finalValue});\n                              e.target.value = finalValue.toString();\n                            }}\n                            className=\"w-full bg-slate-700 border border-slate-600 text-white rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-[#6366f1]\"\n                            placeholder=\"10\"\n                            data-testid=\"input-exercise-duration\"\n                          />\n                        </div>\n                        <div>\n                          <label className=\"text-slate-300 text-sm font-medium block mb-2\">Type</label>\n                          <select\n                            value={newExercise.type}\n                            onChange={(e) => setNewExercise({...newExercise, type: e.target.value})}\n                            className=\"w-full bg-slate-700 border border-slate-600 text-white rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-[#6366f1]\"\n                            data-testid=\"select-exercise-type\"\n                          >\n                            <option value=\"custom\">Custom</option>\n                            <option value=\"chords\">Chords</option>\n                            <option value=\"scales\">Scales</option>\n                            <option value=\"technique\">Technique</option>\n                            <option value=\"theory\">Theory</option>\n                            <option value=\"songs\">Songs</option>\n                            <option value=\"warmup\">Warm-up</option>\n                            <option value=\"rhythm\">Rhythm</option>\n                          </select>\n                        </div>\n                      </div>\n                      <div className=\"flex justify-end space-x-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => setShowAddExercise(false)}\n                          className=\"text-slate-400 hover:text-white\"\n                          data-testid=\"button-cancel-add-exercise\"\n                        >\n                          <X className=\"mr-2\" size={16} />\n                          Cancel\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          onClick={addExercise}\n                          className=\"bg-[#6366f1] hover:bg-[#6366f1]/80 text-white\"\n                          data-testid=\"button-save-exercise\"\n                        >\n                          <Plus className=\"mr-2\" size={16} />\n                          Add Exercise\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ) : (\n                <Button\n                  variant=\"ghost\"\n                  className=\"w-full text-left p-4 border-2 border-dashed border-slate-600 hover:border-[#6366f1] bg-slate-800/50 hover:bg-slate-800 text-slate-400 hover:text-white transition-colors\"\n                  onClick={() => setShowAddExercise(true)}\n                  data-testid=\"button-show-add-exercise\"\n                >\n                  <Plus className=\"mr-2\" size={16} />\n                  Add Custom Exercise\n                </Button>\n              )}\n            </div>\n\n            {/* Session Controls */}\n            <div className=\"flex items-center justify-center space-x-4\">\n              <Button\n                size=\"lg\"\n                className=\"bg-green-600 hover:bg-green-500 text-white px-6 py-3 font-semibold\"\n                disabled={!sessionActive || !sessionPaused}\n                onClick={continueSession}\n              >\n                <Play className=\"mr-2\" size={16} />\n                {sessionPaused ? 'Resume Session' : 'Continue Session'}\n              </Button>\n              <Button\n                size=\"lg\"\n                variant=\"secondary\"\n                className=\"bg-slate-700 hover:bg-slate-600 text-white px-6 py-3 font-semibold\"\n                disabled={!sessionActive || sessionPaused}\n                onClick={pauseSession}\n              >\n                <Pause className=\"mr-2\" size={16} />\n                Pause\n              </Button>\n              <Button\n                size=\"lg\"\n                variant=\"destructive\"\n                className=\"bg-red-600 hover:bg-red-500 text-white px-6 py-3 font-semibold\"\n                disabled={!sessionActive}\n                onClick={endSession}\n              >\n                <Square className=\"mr-2\" size={16} />\n                End Session\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Practice Statistics */}\n        <Card className=\"bg-dark-panel border-slate-700\">\n          <CardContent className=\"p-8\">\n            <h3 className=\"text-xl font-bold text-white mb-6\">Practice Statistics</h3>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n              <Card className=\"bg-slate-800 border-slate-600\">\n                <CardContent className=\"p-4 text-center\">\n                  <div className=\"text-2xl font-bold text-[#f59e0b] mb-1\">{mockStats.todayMinutes}</div>\n                  <div className=\"text-slate-400 text-sm\">Minutes Today</div>\n                </CardContent>\n              </Card>\n              <Card className=\"bg-slate-800 border-slate-600\">\n                <CardContent className=\"p-4 text-center\">\n                  <div className=\"text-2xl font-bold text-[#6366f1] mb-1\">{mockStats.weekMinutes}</div>\n                  <div className=\"text-slate-400 text-sm\">Minutes This Week</div>\n                </CardContent>\n              </Card>\n              <Card className=\"bg-slate-800 border-slate-600\">\n                <CardContent className=\"p-4 text-center\">\n                  <div className=\"text-2xl font-bold text-green-400 mb-1\">{mockStats.streak}</div>\n                  <div className=\"text-slate-400 text-sm\">Day Streak</div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Weekly Progress */}\n            <div>\n              <h4 className=\"text-white font-medium mb-3\">Weekly Progress</h4>\n              <div className=\"grid grid-cols-7 gap-2\">\n                {weeklyData.map((day, index) => (\n                  <div key={index} className=\"text-center\">\n                    <div className=\"text-xs text-slate-400 mb-1\">{day.day}</div>\n                    <div className=\"bg-slate-700 h-16 rounded flex items-end justify-center\">\n                      <div \n                        className={`w-full rounded-b transition-all ${\n                          day.inProgress \n                            ? 'bg-[#f59e0b]/50 border-2 border-dashed border-[#f59e0b]' \n                            : 'bg-[#f59e0b]'\n                        }`}\n                        style={{ height: `${(day.minutes / 40) * 100}%` }}\n                      ></div>\n                    </div>\n                    <div className={`text-xs mt-1 ${day.inProgress ? 'text-[#f59e0b]' : 'text-slate-300'}`}>\n                      {day.inProgress ? 'In progress' : `${day.minutes}m`}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Sidebar */}\n      <div className=\"space-y-6\">\n        {/* Quick Start */}\n        <Card className=\"bg-dark-panel border-slate-700\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold text-white\">Quick Start</h3>\n              <div className=\"flex gap-2\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={saveCurrentAsPreset}\n                  className=\"text-slate-300 hover:text-white hover:bg-slate-700\"\n                  data-testid=\"button-save-current-preset\"\n                >\n                  <Save className=\"w-4 h-4 mr-1\" />\n                  Save\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setShowManagePresets(true)}\n                  className=\"text-slate-300 hover:text-white hover:bg-slate-700\"\n                  data-testid=\"button-manage-presets\"\n                >\n                  <Settings className=\"w-4 h-4 mr-1\" />\n                  Manage\n                </Button>\n              </div>\n            </div>\n            <div className=\"space-y-3\">\n              {presets.map(preset => (\n                <Button\n                  key={preset.id}\n                  variant=\"ghost\"\n                  className=\"w-full text-left p-3 bg-slate-800 hover:bg-slate-700 border border-slate-600 hover:border-[#6366f1] transition-colors\"\n                  onClick={() => startQuickSession(preset)}\n                >\n                  <div>\n                    <div className=\"text-white font-medium\">{preset.title}</div>\n                    <div className=\"text-slate-400 text-xs\">{preset.description}</div>\n                  </div>\n                </Button>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Goals */}\n        <Card className=\"bg-dark-panel border-slate-700\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-white mb-4\">Practice Goals</h3>\n            <div className=\"space-y-4 mb-4\">\n              {mockGoals.map(goal => (\n                <Card key={goal.id} className=\"bg-slate-800 border-slate-600\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-white font-medium\">{goal.title}</span>\n                      <span className=\"text-[#f59e0b] text-sm\">{goal.progress}%</span>\n                    </div>\n                    <Progress value={goal.progress} className=\"h-2 mb-2 bg-slate-700\" />\n                    <div className=\"text-slate-400 text-xs\">Target: {goal.target}</div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n            \n            <Button\n              variant=\"default\"\n              className=\"w-full bg-[#6366f1] hover:bg-[#6366f1]/80 text-white py-2 text-sm\"\n              onClick={() => {\n                console.log('Opening goal creation dialog');\n                // In a real app, this would open a modal or form\n                toast({\n                  title: \"Coming soon!\",\n                  description: \"Goal creation feature will be available in a future update\"\n                });\n              }}\n            >\n              <Plus className=\"mr-2\" size={16} />\n              Add New Goal\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Practice Tips */}\n        <Card className=\"bg-dark-panel border-slate-700\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-white mb-4\">Today's Tip</h3>\n            <Card className=\"bg-slate-800 border-l-4 border-[#f59e0b] border-slate-600\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"flex-shrink-0 w-8 h-8 bg-[#f59e0b] rounded-full flex items-center justify-center\">\n                    <Lightbulb className=\"text-slate-900\" size={16} />\n                  </div>\n                  <div>\n                    <h4 className=\"text-white font-medium mb-2\">Practice Slow, Play Fast</h4>\n                    <p className=\"text-slate-300 text-sm\">\n                      Start practicing new songs or techniques at a slow tempo. Gradually increase the speed as you become more comfortable. Your muscle memory will thank you!\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </CardContent>\n        </Card>\n\n        {/* Recent Sessions */}\n        <Card className=\"bg-dark-panel border-slate-700\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-white mb-4\">Recent Sessions</h3>\n            <div className=\"space-y-3\">\n              {[\n                { title: 'Morning Practice', type: 'Chord changes', duration: '25 min', time: 'Today, 9:30 AM' },\n                { title: 'Scale Practice', type: 'C Major patterns', duration: '20 min', time: 'Yesterday, 7:15 PM' },\n                { title: 'Song Practice', type: 'Wonderwall', duration: '35 min', time: 'Yesterday, 2:45 PM' }\n              ].map((session, index) => (\n                <div key={index} className=\"flex items-center justify-between text-sm\">\n                  <div>\n                    <div className=\"text-white font-medium\">{session.title}</div>\n                    <div className=\"text-slate-400 text-xs\">\n                      {session.type} • {session.duration}\n                    </div>\n                  </div>\n                  <div className=\"text-slate-400 text-xs\">{session.time}</div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n    \n    {/* Manage Presets Dialog */}\n    <ManagePresetsDialog\n      open={showManagePresets}\n      onOpenChange={setShowManagePresets}\n      presets={presets}\n      createPreset={createPreset}\n      updatePreset={updatePreset}\n      deletePreset={deletePreset}\n    />\n    </>\n  );\n}\n\n// Preset Management Dialog Component\nfunction ManagePresetsDialog({ \n  open, \n  onOpenChange, \n  presets, \n  createPreset, \n  updatePreset, \n  deletePreset \n}: {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  presets: QuickPreset[];\n  createPreset: (data: any) => void;\n  updatePreset: (id: string, data: any) => void;\n  deletePreset: (id: string) => void;\n}) {\n  const [editingPreset, setEditingPreset] = useState<QuickPreset | null>(null);\n  const [showForm, setShowForm] = useState(false);\n  \n  const form = useForm<PresetFormData>({\n    resolver: zodResolver(presetFormSchema),\n    defaultValues: {\n      title: '',\n      description: '',\n      exercises: [{ title: '', duration: 10, type: 'custom' }]\n    }\n  });\n\n  const handleEdit = (preset: QuickPreset) => {\n    setEditingPreset(preset);\n    form.reset({\n      title: preset.title,\n      description: preset.description || '',\n      exercises: preset.exercises\n    });\n    setShowForm(true);\n  };\n\n  const handleDelete = (preset: QuickPreset) => {\n    if (confirm(`Delete preset \"${preset.title}\"?`)) {\n      deletePreset(preset.id);\n    }\n  };\n\n  const onSubmit = (data: PresetFormData) => {\n    try {\n      if (editingPreset) {\n        updatePreset(editingPreset.id, data);\n      } else {\n        createPreset(data);\n      }\n      setShowForm(false);\n      setEditingPreset(null);\n      form.reset();\n    } catch (error) {\n      console.error('Failed to save preset:', error);\n    }\n  };\n\n  const addExercise = () => {\n    const exercises = form.getValues('exercises');\n    form.setValue('exercises', [...exercises, { title: '', duration: 10, type: 'custom' }]);\n  };\n\n  const removeExercise = (index: number) => {\n    const exercises = form.getValues('exercises');\n    if (exercises.length > 1) {\n      form.setValue('exercises', exercises.filter((_, i) => i !== index));\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto bg-dark-panel border-slate-700\">\n        <DialogHeader>\n          <DialogTitle className=\"text-white\">Manage Quick Start Presets</DialogTitle>\n        </DialogHeader>\n        \n        {!showForm ? (\n          <div>\n            <div className=\"flex justify-between items-center mb-4\">\n              <span className=\"text-slate-300\">Your presets</span>\n              <Button\n                onClick={() => setShowForm(true)}\n                className=\"bg-[#6366f1] hover:bg-[#6366f1]/80\"\n                data-testid=\"button-add-preset\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Preset\n              </Button>\n            </div>\n            \n            <div className=\"space-y-3\">\n              {presets.map(preset => (\n                <Card key={preset.id} className=\"bg-slate-800 border-slate-600\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-semibold text-white\">{preset.title}</h4>\n                        <p className=\"text-slate-400 text-sm\">{preset.description}</p>\n                        <p className=\"text-slate-500 text-xs mt-1\">\n                          {preset.exercises.length} exercises\n                        </p>\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleEdit(preset)}\n                          className=\"text-slate-400 hover:text-white\"\n                          data-testid={`button-edit-preset-${preset.id}`}\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleDelete(preset)}\n                          className=\"text-slate-400 hover:text-red-400\"\n                          data-testid={`button-delete-preset-${preset.id}`}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n        ) : (\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div className=\"flex justify-between items-center mb-4\">\n                <h3 className=\"text-lg font-semibold text-white\">\n                  {editingPreset ? 'Edit Preset' : 'Create New Preset'}\n                </h3>\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  onClick={() => {\n                    setShowForm(false);\n                    setEditingPreset(null);\n                    form.reset();\n                  }}\n                  className=\"text-slate-400\"\n                >\n                  <X className=\"w-4 h-4\" />\n                </Button>\n              </div>\n              \n              <FormField\n                control={form.control}\n                name=\"title\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Title</FormLabel>\n                    <FormControl>\n                      <Input {...field} className=\"bg-slate-700 border-slate-600 text-white\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Description</FormLabel>\n                    <FormControl>\n                      <Textarea {...field} className=\"bg-slate-700 border-slate-600 text-white\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <div>\n                <div className=\"flex justify-between items-center mb-3\">\n                  <FormLabel className=\"text-white\">Exercises</FormLabel>\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={addExercise}\n                    className=\"text-[#6366f1] hover:text-[#6366f1]/80\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-1\" />\n                    Add Exercise\n                  </Button>\n                </div>\n                \n                {form.watch('exercises').map((exercise, index) => (\n                  <Card key={index} className=\"bg-slate-700 border-slate-600 mb-3\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between mb-3\">\n                        <span className=\"text-white font-medium\">Exercise {index + 1}</span>\n                        {form.watch('exercises').length > 1 && (\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => removeExercise(index)}\n                            className=\"text-red-400 hover:text-red-300\"\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        )}\n                      </div>\n                      \n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3\">\n                        <FormField\n                          control={form.control}\n                          name={`exercises.${index}.title`}\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className=\"text-slate-300\">Title</FormLabel>\n                              <FormControl>\n                                <Input {...field} className=\"bg-slate-600 border-slate-500 text-white\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={form.control}\n                          name={`exercises.${index}.duration`}\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className=\"text-slate-300\">Duration (min)</FormLabel>\n                              <FormControl>\n                                <Input\n                                  {...field}\n                                  type=\"number\"\n                                  min=\"1\"\n                                  onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                                  className=\"bg-slate-600 border-slate-500 text-white\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={form.control}\n                          name={`exercises.${index}.type`}\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className=\"text-slate-300\">Type</FormLabel>\n                              <Select onValueChange={field.onChange} value={field.value}>\n                                <FormControl>\n                                  <SelectTrigger className=\"bg-slate-600 border-slate-500 text-white\">\n                                    <SelectValue />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent className=\"bg-slate-700 border-slate-600\">\n                                  <SelectItem value=\"custom\">Custom</SelectItem>\n                                  <SelectItem value=\"warmup\">Warm-up</SelectItem>\n                                  <SelectItem value=\"chords\">Chords</SelectItem>\n                                  <SelectItem value=\"scales\">Scales</SelectItem>\n                                  <SelectItem value=\"technique\">Technique</SelectItem>\n                                  <SelectItem value=\"theory\">Theory</SelectItem>\n                                  <SelectItem value=\"songs\">Songs</SelectItem>\n                                  <SelectItem value=\"rhythm\">Rhythm</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n              \n              <div className=\"flex justify-end gap-3 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  onClick={() => {\n                    setShowForm(false);\n                    setEditingPreset(null);\n                    form.reset();\n                  }}\n                  className=\"text-slate-400\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  className=\"bg-[#6366f1] hover:bg-[#6366f1]/80\"\n                  data-testid=\"button-save-preset\"\n                >\n                  <Save className=\"w-4 h-4 mr-2\" />\n                  {editingPreset ? 'Update' : 'Create'} Preset\n                </Button>\n              </div>\n            </form>\n          </Form>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":52353},"client/src/components/scales.tsx":{"content":"import { useState, useMemo } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Slider } from '@/components/ui/slider';\nimport { Music, Play } from 'lucide-react';\nimport { \n  scaleTypes, \n  noteNames, \n  generateScaleNotes, \n  getScalePosition,\n  getScaleFrequencies,\n  intervalsToScaleDegrees\n} from '@/lib/scale-data';\nimport { audioEngine } from '@/lib/audio';\n\nexport default function Scales() {\n  const [selectedRoot, setSelectedRoot] = useState('C');\n  const [selectedScale, setSelectedScale] = useState('major');\n  const [selectedPosition, setSelectedPosition] = useState(1);\n  const [playbackSpeed, setPlaybackSpeed] = useState(80);\n\n  const currentScale = useMemo(() => {\n    return scaleTypes[selectedScale];\n  }, [selectedScale]);\n\n  const scaleNotes = useMemo(() => {\n    return generateScaleNotes(selectedRoot, selectedScale);\n  }, [selectedRoot, selectedScale]);\n\n  const currentPosition = useMemo(() => {\n    return getScalePosition(selectedRoot, selectedScale, selectedPosition);\n  }, [selectedRoot, selectedScale, selectedPosition]);\n\n  const renderFretboard = () => {\n    const position = currentPosition;\n    const strings = [1, 2, 3, 4, 5, 6]; // High E to Low E\n    \n    // Define fret ranges for each position to show only relevant frets\n    const positionRanges: { [pos: number]: { start: number; end: number } } = {\n      1: { start: 0, end: 4 },   // Open position to 4th fret\n      2: { start: 2, end: 6 },   // 2nd to 6th fret  \n      3: { start: 4, end: 8 },   // 4th to 8th fret\n      4: { start: 7, end: 11 },  // 7th to 11th fret\n      5: { start: 9, end: 13 }   // 9th to 13th fret\n    };\n    \n    const range = positionRanges[selectedPosition] || positionRanges[1];\n    const frets = Array.from({ length: range.end - range.start + 1 }, (_, i) => range.start + i);\n\n    return (\n      <div className=\"bg-gradient-to-r from-amber-900 to-amber-800 rounded-lg p-6 mb-6\">\n        <div className=\"text-center mb-4\">\n          <h3 className=\"text-white font-semibold text-lg\">\n            {selectedRoot} {currentScale.name} Scale - Position {selectedPosition}\n          </h3>\n          <p className=\"text-amber-200 text-sm mt-1\">\n            One connected scale pattern across all 6 strings\n          </p>\n        </div>\n        \n        {/* Instructions */}\n        <div className=\"bg-amber-900/30 rounded p-3 mb-4\">\n          <p className=\"text-amber-100 text-sm text-center\">\n            <strong>This is ONE scale pattern</strong> that connects across all strings. \n            Play the marked notes in sequence to hear the scale.\n          </p>\n        </div>\n        \n        <div className=\"bg-amber-900/50 rounded p-4 overflow-x-auto\">\n          {/* Fret numbers header - perfectly aligned */}\n          <div className=\"flex items-center mb-2\">\n            <div className=\"w-20 text-amber-200 text-xs text-right pr-3 font-bold\">Fret:</div>\n            <div className=\"flex\">\n              {frets.map(fret => (\n                <div key={fret} className=\"w-12 text-center text-amber-200 font-mono text-xs font-bold\">\n                  {fret === 0 ? '0' : fret}\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Guitar strings as one connected pattern */}\n          <div className=\"relative\">\n            {strings.map(stringNum => {\n              const stringNames = ['E', 'B', 'G', 'D', 'A', 'E'];\n              const stringName = stringNames[stringNum - 1];\n              const stringFrets = position.frets[stringNum] || [];\n              const rootNotes = position.rootNotes.filter(note => note.string === stringNum);\n              \n              return (\n                <div key={stringNum} className=\"flex items-center mb-1\">\n                  <div className=\"w-20 text-amber-200 text-xs text-right pr-3 font-bold\">\n                    {stringName}\n                  </div>\n                  <div className=\"flex relative\">\n                    {/* String line */}\n                    <div className=\"absolute top-1/2 left-0 right-0 h-0.5 bg-amber-600 transform -translate-y-1/2\"></div>\n                    \n                    {frets.map(fret => {\n                      const hasNote = stringFrets.includes(fret);\n                      const isRoot = rootNotes.some(root => root.fret === fret);\n                      \n                      return (\n                        <div key={fret} className=\"w-12 h-8 relative flex items-center justify-center\">\n                          {/* Fret marker */}\n                          {fret > 0 && (\n                            <div className=\"absolute left-0 top-0 bottom-0 w-0.5 bg-amber-700\"></div>\n                          )}\n                          \n                          {hasNote && (\n                            <div className={`w-5 h-5 rounded-full flex items-center justify-center text-white text-xs font-bold relative z-10 ${\n                              isRoot ? 'bg-[#f59e0b] border-2 border-amber-300' : 'bg-[#6366f1] border-2 border-blue-300'\n                            }`}>\n                              {isRoot ? selectedRoot : '•'}\n                            </div>\n                          )}\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n\n          {/* Fret position markers (3rd, 5th, 7th, etc.) */}\n          <div className=\"flex items-center mt-1\">\n            <div className=\"w-20 text-xs text-right pr-3\"></div>\n            <div className=\"flex relative\">\n              {frets.map(fret => (\n                <div key={fret} className=\"w-12 flex justify-center\">\n                  {[3, 5, 7, 9, 12].includes(fret) && (\n                    <div className=\"w-2 h-2 bg-amber-500 rounded-full opacity-60\"></div>\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Legend and instructions */}\n        <div className=\"mt-4 space-y-3\">\n          <div className=\"flex justify-center space-x-8\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-5 h-5 bg-[#f59e0b] border-2 border-amber-300 rounded-full flex items-center justify-center text-white text-xs font-bold\">\n                {selectedRoot}\n              </div>\n              <span className=\"text-amber-100 text-sm\">Root Note</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-5 h-5 bg-[#6366f1] border-2 border-blue-300 rounded-full flex items-center justify-center text-white text-xs font-bold\">•</div>\n              <span className=\"text-amber-100 text-sm\">Scale Notes</span>\n            </div>\n          </div>\n          \n          <div className=\"bg-amber-900/30 rounded p-3\">\n            <p className=\"text-amber-100 text-xs text-center\">\n              <strong>How to play:</strong> This shows one complete scale pattern. Start from any root note (orange) \n              and play through the connected notes to create the full scale sound.\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const playScale = () => {\n    const frequencies = getScaleFrequencies(selectedRoot, selectedScale);\n    const noteInterval = (60 / playbackSpeed) * 1000; // ms per note\n\n    frequencies.forEach((frequency, index) => {\n      setTimeout(() => {\n        audioEngine.playReferenceTone(frequency, 0.5);\n      }, index * noteInterval);\n    });\n  };\n\n  const startExercise = (exerciseType: string) => {\n    console.log(`Starting ${exerciseType} exercise`);\n    // Implementation would depend on exercise type\n    playScale();\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n      {/* Fretboard Visualization */}\n      <div className=\"lg:col-span-2\">\n        <Card className=\"bg-dark-panel border-slate-700\">\n          <CardContent className=\"p-8\">\n            <h2 className=\"text-2xl font-bold text-white mb-6 flex items-center\">\n              <Music className=\"mr-3 text-[#6366f1]\" size={28} />\n              Scale Practice\n            </h2>\n\n            {renderFretboard()}\n\n            {/* Scale Controls */}\n            <div className=\"bg-slate-800 rounded-lg p-4\">\n              <h4 className=\"text-white font-medium mb-3\">Practice Tools</h4>\n              <div className=\"flex flex-col sm:flex-row items-center justify-between space-y-4 sm:space-y-0 sm:space-x-4\">\n                <Button\n                  size=\"lg\"\n                  className=\"bg-[#6366f1] hover:bg-[#6366f1]/80 text-white px-6 py-3 font-semibold\"\n                  onClick={playScale}\n                >\n                  <Play className=\"mr-2\" size={20} />\n                  Play Scale Audio\n                </Button>\n                <div className=\"flex items-center space-x-2\">\n                  <label className=\"text-slate-300\">Speed:</label>\n                  <Slider\n                    value={[playbackSpeed]}\n                    onValueChange={([value]) => setPlaybackSpeed(value)}\n                    min={60}\n                    max={140}\n                    step={10}\n                    className=\"w-24 slider\"\n                  />\n                  <span className=\"text-slate-300 text-sm w-16\">{playbackSpeed} BPM</span>\n                </div>\n              </div>\n              <p className=\"text-slate-400 text-xs mt-2\">\n                Click \"Play Scale Audio\" to hear how the scale should sound\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Scale Selection & Info */}\n      <div className=\"space-y-6\">\n        {/* Scale Selection */}\n        <Card className=\"bg-dark-panel border-slate-700\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-white mb-4\">Scale Selection</h3>\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-slate-300 text-sm mb-2\">Root Note</label>\n                <Select value={selectedRoot} onValueChange={setSelectedRoot}>\n                  <SelectTrigger className=\"w-full bg-slate-700 border-slate-600 text-white\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent className=\"bg-slate-700 border-slate-600\">\n                    {noteNames.map(note => (\n                      <SelectItem key={note} value={note.split('/')[0]} className=\"text-white hover:bg-slate-600\">\n                        {note}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <label className=\"block text-slate-300 text-sm mb-2\">Scale Type</label>\n                <Select value={selectedScale} onValueChange={setSelectedScale}>\n                  <SelectTrigger className=\"w-full bg-slate-700 border-slate-600 text-white\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent className=\"bg-slate-700 border-slate-600\">\n                    {Object.entries(scaleTypes).map(([key, scale]) => (\n                      <SelectItem key={key} value={key} className=\"text-white hover:bg-slate-600\">\n                        {scale.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <label className=\"block text-slate-300 text-sm mb-2\">Position</label>\n                <div className=\"grid grid-cols-5 gap-1\">\n                  {[1, 2, 3, 4, 5].map(pos => (\n                    <Button\n                      key={pos}\n                      variant={selectedPosition === pos ? \"default\" : \"secondary\"}\n                      className={`p-2 font-medium text-sm ${\n                        selectedPosition === pos\n                          ? 'bg-[#6366f1] text-white'\n                          : 'bg-slate-700 hover:bg-slate-600 text-slate-300 hover:text-white'\n                      }`}\n                      onClick={() => setSelectedPosition(pos)}\n                    >\n                      {pos}\n                    </Button>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Scale Information */}\n        <Card className=\"bg-dark-panel border-slate-700\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-white mb-4\">Scale Info</h3>\n            <div className=\"space-y-3\">\n              <div>\n                <span className=\"text-slate-400 text-sm\">Notes:</span>\n                <div className=\"text-white font-mono mt-1\">\n                  {scaleNotes.join(' ')}\n                </div>\n              </div>\n              <div>\n                <span className=\"text-slate-400 text-sm\">Pattern:</span>\n                <div className=\"text-white font-mono mt-1\">\n                  {currentScale.pattern}\n                </div>\n              </div>\n              <div>\n                <span className=\"text-slate-400 text-sm\">Intervals:</span>\n                <div className=\"text-white font-mono mt-1\">\n                  {intervalsToScaleDegrees(currentScale.intervals).join(' ')}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Practice Exercises */}\n        <Card className=\"bg-dark-panel border-slate-700\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-white mb-4\">Practice Exercises</h3>\n            <div className=\"space-y-2\">\n              {[\n                { id: 'ascending', title: 'Ascending Scale', description: 'Play from lowest to highest note' },\n                { id: 'descending', title: 'Descending Scale', description: 'Play from highest to lowest note' },\n                { id: 'intervals', title: 'Interval Practice', description: 'Practice thirds, fourths, fifths' },\n                { id: 'random', title: 'Random Notes', description: 'Random scale notes for ear training' }\n              ].map(exercise => (\n                <Button\n                  key={exercise.id}\n                  variant=\"ghost\"\n                  className=\"w-full text-left p-3 bg-slate-800 hover:bg-slate-700 border border-slate-600 hover:border-[#6366f1] transition-colors\"\n                  onClick={() => startExercise(exercise.id)}\n                >\n                  <div>\n                    <div className=\"text-white font-medium\">{exercise.title}</div>\n                    <div className=\"text-slate-400 text-sm\">{exercise.description}</div>\n                  </div>\n                </Button>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15036},"client/src/components/tuner.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Slider } from '@/components/ui/slider';\nimport { Radio, Mic, MicOff, Play } from 'lucide-react';\nimport { useTuner } from '@/hooks/use-tuner';\n\nconst GUITAR_STRINGS = [\n  { name: 'E', fullName: 'E4', frequency: 329.6, string: '1st String' },\n  { name: 'B', fullName: 'B3', frequency: 246.9, string: '2nd String' },\n  { name: 'G', fullName: 'G3', frequency: 196.0, string: '3rd String' },\n  { name: 'D', fullName: 'D3', frequency: 146.8, string: '4th String' },\n  { name: 'A', fullName: 'A2', frequency: 110.0, string: '5th String' },\n  { name: 'E', fullName: 'E2', frequency: 82.4, string: '6th String' }\n];\n\nconst REFERENCE_PITCHES = [\n  { label: 'A4 = 440 Hz', value: 440 },\n  { label: 'A4 = 438 Hz', value: 438 },\n  { label: 'A4 = 442 Hz', value: 442 },\n  { label: 'A4 = 444 Hz', value: 444 }\n];\n\nexport default function Tuner() {\n  const {\n    isListening,\n    detectedNote,\n    frequency,\n    cents,\n    accuracy,\n    referencePitch,\n    toggleListening,\n    playReference,\n    setReferencePitch\n  } = useTuner();\n\n  const getNeedlePosition = () => {\n    // Convert cents to position (-50 to +50 cents = -40% to +40% position)\n    const maxCents = 50;\n    const percentage = Math.max(-40, Math.min(40, (cents / maxCents) * 40));\n    return percentage;\n  };\n\n  const getAccuracyColor = () => {\n    switch (accuracy) {\n      case 'in-tune': return 'text-green-400';\n      case 'sharp': return 'text-red-400';\n      case 'flat': return 'text-blue-400';\n      default: return 'text-slate-400';\n    }\n  };\n\n  const getAccuracyText = () => {\n    switch (accuracy) {\n      case 'in-tune': return 'In Tune';\n      case 'sharp': return 'Sharp';\n      case 'flat': return 'Flat';\n      default: return 'Play a note';\n    }\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto\">\n      <Card className=\"bg-dark-panel border-slate-700\">\n        <CardContent className=\"p-8\">\n          <h2 className=\"text-2xl font-bold text-white mb-8 text-center flex items-center justify-center\">\n            <Radio className=\"mr-3 text-[#6366f1]\" size={28} />\n            Guitar Tuner\n          </h2>\n\n          {/* Tuning Display */}\n          <div className=\"text-center mb-8\">\n            <Card className=\"bg-slate-800 border-slate-600 mb-6\">\n              <CardContent className=\"p-8\">\n                <div className=\"text-6xl font-bold text-[#f59e0b] mb-2\">\n                  {detectedNote}\n                </div>\n                <div className=\"text-xl text-slate-400 mb-4\">\n                  {frequency.toFixed(1)} Hz\n                </div>\n                \n                {/* Tuning Indicator */}\n                <div className=\"flex items-center justify-center mb-6\">\n                  <div className=\"w-80 h-4 bg-slate-700 rounded-full relative\">\n                    <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-1 h-8 bg-white rounded\"></div>\n                    {/* Tuning needle */}\n                    <div \n                      className=\"absolute top-1/2 transform -translate-y-1/2 w-4 h-4 bg-[#6366f1] rounded-full transition-all duration-200\"\n                      style={{ \n                        left: `calc(50% + ${getNeedlePosition()}%)`,\n                        marginLeft: '-8px'\n                      }}\n                    ></div>\n                  </div>\n                </div>\n                \n                <div className=\"flex justify-between text-sm text-slate-400 max-w-xs mx-auto\">\n                  <span>Flat</span>\n                  <span className={`font-semibold ${getAccuracyColor()}`}>\n                    {getAccuracyText()}\n                  </span>\n                  <span>Sharp</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Microphone Control */}\n            <Button\n              size=\"lg\"\n              className=\"bg-[#6366f1] hover:bg-[#6366f1]/80 text-white px-8 py-4 font-semibold text-lg mb-6\"\n              onClick={toggleListening}\n            >\n              {isListening ? (\n                <>\n                  <MicOff className=\"mr-3\" size={20} />\n                  Stop Listening\n                </>\n              ) : (\n                <>\n                  <Mic className=\"mr-3\" size={20} />\n                  Start Listening\n                </>\n              )}\n            </Button>\n\n            <p className=\"text-slate-400 text-sm\">\n              {isListening \n                ? 'Listening... Play a note on your guitar' \n                : 'Click \"Start Listening\" and play a note on your guitar'\n              }\n            </p>\n          </div>\n\n          {/* String Reference */}\n          <div className=\"grid grid-cols-2 md:grid-cols-6 gap-4 mb-8\">\n            {GUITAR_STRINGS.map((string, index) => (\n              <Card\n                key={index}\n                className=\"bg-slate-800 border-slate-600 hover:border-[#6366f1] transition-colors cursor-pointer\"\n              >\n                <CardContent className=\"p-4 text-center\">\n                  <div className=\"text-2xl font-bold text-[#f59e0b] mb-1\">\n                    {string.name}\n                  </div>\n                  <div className=\"text-sm text-slate-400 mb-2\">\n                    {string.frequency} Hz\n                  </div>\n                  <div className=\"text-xs text-slate-500 mb-2\">\n                    {string.string}\n                  </div>\n                  <Button\n                    size=\"sm\"\n                    className=\"bg-[#6366f1] hover:bg-[#6366f1]/80 text-white px-3 py-1 text-xs\"\n                    onClick={() => playReference(string.fullName)}\n                  >\n                    <Play className=\"mr-1\" size={12} />\n                    Play\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {/* Tuning Options */}\n          <Card className=\"bg-slate-800 border-slate-600\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex flex-col sm:flex-row items-center justify-between space-y-4 sm:space-y-0\">\n                <div className=\"flex items-center space-x-4\">\n                  <label className=\"text-slate-300 text-sm\">Reference Pitch:</label>\n                  <Select \n                    value={referencePitch.toString()} \n                    onValueChange={(value) => setReferencePitch(parseInt(value))}\n                  >\n                    <SelectTrigger className=\"w-40 bg-slate-700 border-slate-600 text-white text-sm\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-slate-700 border-slate-600\">\n                      {REFERENCE_PITCHES.map(pitch => (\n                        <SelectItem \n                          key={pitch.value} \n                          value={pitch.value.toString()}\n                          className=\"text-white hover:bg-slate-600\"\n                        >\n                          {pitch.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div className=\"flex items-center space-x-2\">\n                  <label className=\"text-slate-300 text-sm\">Sensitivity:</label>\n                  <Slider\n                    value={[5]}\n                    onValueChange={() => {}}\n                    min={1}\n                    max={10}\n                    step={1}\n                    className=\"w-20 slider\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7895},"client/src/hooks/use-metronome.ts":{"content":"import { useState, useRef, useCallback, useEffect } from 'react';\nimport { audioEngine } from '@/lib/audio';\n\nexport interface MetronomeState {\n  bpm: number;\n  isPlaying: boolean;\n  timeSignature: [number, number];\n  currentBeat: number;\n  volume: number;\n  accentEnabled: boolean;\n}\n\nexport const useMetronome = () => {\n  const [state, setState] = useState<MetronomeState>({\n    bpm: 120,\n    isPlaying: false,\n    timeSignature: [4, 4],\n    currentBeat: 1,\n    volume: 0.7,\n    accentEnabled: true\n  });\n\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const nextBeatTimeRef = useRef<number>(0);\n\n  const scheduleBeat = useCallback(() => {\n    const now = Date.now();\n    const beatInterval = (60 / state.bpm) * 1000;\n\n    while (nextBeatTimeRef.current < now + 100) {\n      const isAccent = state.accentEnabled && state.currentBeat === 1;\n      \n      setTimeout(() => {\n        audioEngine.playMetronomeClick(isAccent, state.volume);\n      }, nextBeatTimeRef.current - now);\n\n      setState(prev => ({\n        ...prev,\n        currentBeat: prev.currentBeat >= prev.timeSignature[0] ? 1 : prev.currentBeat + 1\n      }));\n\n      nextBeatTimeRef.current += beatInterval;\n    }\n  }, [state.bpm, state.currentBeat, state.timeSignature, state.volume, state.accentEnabled]);\n\n  const start = useCallback(async () => {\n    await audioEngine.resumeContext();\n    \n    setState(prev => ({ ...prev, isPlaying: true, currentBeat: 1 }));\n    nextBeatTimeRef.current = Date.now();\n    \n    intervalRef.current = setInterval(scheduleBeat, 25);\n  }, [scheduleBeat]);\n\n  const stop = useCallback(() => {\n    setState(prev => ({ ...prev, isPlaying: false, currentBeat: 1 }));\n    \n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n  }, []);\n\n  const toggle = useCallback(() => {\n    if (state.isPlaying) {\n      stop();\n    } else {\n      start();\n    }\n  }, [state.isPlaying, start, stop]);\n\n  const setBpm = useCallback((bpm: number) => {\n    setState(prev => ({ ...prev, bpm: Math.max(60, Math.min(200, bpm)) }));\n  }, []);\n\n  const setTimeSignature = useCallback((timeSignature: [number, number]) => {\n    setState(prev => ({ \n      ...prev, \n      timeSignature,\n      currentBeat: 1\n    }));\n  }, []);\n\n  const setVolume = useCallback((volume: number) => {\n    const normalizedVolume = Math.max(0, Math.min(1, volume));\n    setState(prev => ({ ...prev, volume: normalizedVolume }));\n    audioEngine.setVolume(normalizedVolume);\n  }, []);\n\n  const setAccentEnabled = useCallback((enabled: boolean) => {\n    setState(prev => ({ ...prev, accentEnabled: enabled }));\n  }, []);\n\n  useEffect(() => {\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, []);\n\n  return {\n    ...state,\n    start,\n    stop,\n    toggle,\n    setBpm,\n    setTimeSignature,\n    setVolume,\n    setAccentEnabled\n  };\n};\n","size_bytes":2921},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-tuner.ts":{"content":"import { useState, useRef, useCallback, useEffect } from 'react';\nimport { audioEngine } from '@/lib/audio';\n\nexport interface TunerState {\n  isListening: boolean;\n  detectedNote: string;\n  frequency: number;\n  cents: number; // deviation from target frequency\n  accuracy: 'sharp' | 'flat' | 'in-tune';\n  referencePitch: number; // A4 frequency\n}\n\nconst NOTE_FREQUENCIES: { [key: string]: number } = {\n  'E2': 82.41,   // 6th string\n  'A2': 110.00,  // 5th string\n  'D3': 146.83,  // 4th string\n  'G3': 196.00,  // 3rd string\n  'B3': 246.94,  // 2nd string\n  'E4': 329.63   // 1st string\n};\n\nconst NOTE_NAMES = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n\nexport const useTuner = () => {\n  const [state, setState] = useState<TunerState>({\n    isListening: false,\n    detectedNote: 'A',\n    frequency: 440,\n    cents: 0,\n    accuracy: 'in-tune',\n    referencePitch: 440\n  });\n\n  const mediaStreamRef = useRef<MediaStream | null>(null);\n  const analyserRef = useRef<AnalyserNode | null>(null);\n  const animationFrameRef = useRef<number | null>(null);\n\n  const frequencyToNote = useCallback((frequency: number): { note: string; cents: number } => {\n    const A4 = state.referencePitch;\n    const C0 = A4 * Math.pow(2, -4.75);\n    \n    const noteIndex = Math.round(12 * Math.log2(frequency / C0));\n    const noteName = NOTE_NAMES[noteIndex % 12];\n    const octave = Math.floor(noteIndex / 12);\n    \n    const expectedFrequency = C0 * Math.pow(2, noteIndex / 12);\n    const cents = Math.round(1200 * Math.log2(frequency / expectedFrequency));\n    \n    return { note: `${noteName}${octave}`, cents };\n  }, [state.referencePitch]);\n\n  const getAccuracy = useCallback((cents: number): 'sharp' | 'flat' | 'in-tune' => {\n    if (Math.abs(cents) <= 5) return 'in-tune';\n    return cents > 0 ? 'sharp' : 'flat';\n  }, []);\n\n  const analyzeAudio = useCallback(() => {\n    if (!analyserRef.current) return;\n\n    const bufferLength = analyserRef.current.frequencyBinCount;\n    const dataArray = new Float32Array(bufferLength);\n    analyserRef.current.getFloatFrequencyData(dataArray);\n\n    // Simple peak detection for fundamental frequency\n    let maxIndex = 0;\n    let maxValue = -Infinity;\n    \n    for (let i = 0; i < bufferLength; i++) {\n      if (dataArray[i] > maxValue) {\n        maxValue = dataArray[i];\n        maxIndex = i;\n      }\n    }\n\n    if (maxValue > -50) { // Threshold for signal detection\n      const frequency = (maxIndex * 44100) / (2 * bufferLength);\n      \n      if (frequency > 75 && frequency < 400) { // Guitar frequency range\n        const { note, cents } = frequencyToNote(frequency);\n        const accuracy = getAccuracy(cents);\n        \n        setState(prev => ({\n          ...prev,\n          detectedNote: note,\n          frequency: Math.round(frequency * 10) / 10,\n          cents,\n          accuracy\n        }));\n      }\n    }\n\n    if (state.isListening) {\n      animationFrameRef.current = requestAnimationFrame(analyzeAudio);\n    }\n  }, [state.isListening, frequencyToNote, getAccuracy]);\n\n  const startListening = useCallback(async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      mediaStreamRef.current = stream;\n\n      const audioContext = new AudioContext();\n      const source = audioContext.createMediaStreamSource(stream);\n      const analyser = audioContext.createAnalyser();\n      \n      analyser.fftSize = 4096;\n      analyser.smoothingTimeConstant = 0.8;\n      \n      source.connect(analyser);\n      analyserRef.current = analyser;\n\n      setState(prev => ({ ...prev, isListening: true }));\n      analyzeAudio();\n    } catch (error) {\n      console.error('Error accessing microphone:', error);\n    }\n  }, [analyzeAudio]);\n\n  const stopListening = useCallback(() => {\n    setState(prev => ({ ...prev, isListening: false }));\n    \n    if (mediaStreamRef.current) {\n      mediaStreamRef.current.getTracks().forEach(track => track.stop());\n      mediaStreamRef.current = null;\n    }\n    \n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n      animationFrameRef.current = null;\n    }\n    \n    analyserRef.current = null;\n  }, []);\n\n  const toggleListening = useCallback(() => {\n    if (state.isListening) {\n      stopListening();\n    } else {\n      startListening();\n    }\n  }, [state.isListening, startListening, stopListening]);\n\n  const playReference = useCallback((noteName: string) => {\n    const frequency = NOTE_FREQUENCIES[noteName];\n    if (frequency) {\n      audioEngine.playReferenceTone(frequency);\n    }\n  }, []);\n\n  const setReferencePitch = useCallback((pitch: number) => {\n    setState(prev => ({ ...prev, referencePitch: pitch }));\n  }, []);\n\n  useEffect(() => {\n    return () => {\n      stopListening();\n    };\n  }, [stopListening]);\n\n  return {\n    ...state,\n    startListening,\n    stopListening,\n    toggleListening,\n    playReference,\n    setReferencePitch,\n    noteFrequencies: NOTE_FREQUENCIES\n  };\n};\n","size_bytes":4976},"client/src/lib/audio.ts":{"content":"export class AudioEngine {\n  private audioContext: AudioContext | null = null;\n  private metronomeGain: GainNode | null = null;\n  private isPlaying = false;\n\n  constructor() {\n    this.initializeAudioContext();\n  }\n\n  private initializeAudioContext() {\n    if (typeof window !== 'undefined') {\n      this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n      this.metronomeGain = this.audioContext.createGain();\n      this.metronomeGain.connect(this.audioContext.destination);\n    }\n  }\n\n  async resumeContext() {\n    if (this.audioContext?.state === 'suspended') {\n      await this.audioContext.resume();\n    }\n  }\n\n  // Metronome functionality\n  playMetronomeClick(isAccent = false, volume = 0.7) {\n    if (!this.audioContext || !this.metronomeGain) return;\n\n    const oscillator = this.audioContext.createOscillator();\n    const gain = this.audioContext.createGain();\n\n    oscillator.connect(gain);\n    gain.connect(this.metronomeGain);\n\n    // Different frequencies for accent vs regular beats\n    oscillator.frequency.setValueAtTime(\n      isAccent ? 1200 : 800,\n      this.audioContext.currentTime\n    );\n\n    gain.gain.setValueAtTime(volume, this.audioContext.currentTime);\n    gain.gain.exponentialRampToValueAtTime(0.001, this.audioContext.currentTime + 0.1);\n\n    oscillator.start(this.audioContext.currentTime);\n    oscillator.stop(this.audioContext.currentTime + 0.1);\n  }\n\n  // Reference tone for tuner\n  playReferenceTone(frequency: number, duration = 2) {\n    if (!this.audioContext) return;\n\n    const oscillator = this.audioContext.createOscillator();\n    const gain = this.audioContext.createGain();\n\n    oscillator.connect(gain);\n    gain.connect(this.audioContext.destination);\n\n    oscillator.frequency.setValueAtTime(frequency, this.audioContext.currentTime);\n    oscillator.type = 'sine';\n\n    gain.gain.setValueAtTime(0, this.audioContext.currentTime);\n    gain.gain.linearRampToValueAtTime(0.3, this.audioContext.currentTime + 0.1);\n    gain.gain.exponentialRampToValueAtTime(0.001, this.audioContext.currentTime + duration);\n\n    oscillator.start(this.audioContext.currentTime);\n    oscillator.stop(this.audioContext.currentTime + duration);\n  }\n\n  // Chord progression playback\n  playChordProgression(chords: string[], bpm = 120) {\n    if (!this.audioContext) return;\n\n    const chordDuration = 60 / bpm * 4; // 4 beats per chord\n    const startTime = this.audioContext.currentTime;\n\n    chords.forEach((chord, index) => {\n      const chordTime = startTime + (index * chordDuration);\n      this.playChord(chord, chordTime, chordDuration);\n    });\n  }\n\n  private playChord(chordName: string, startTime: number, duration: number) {\n    if (!this.audioContext) return;\n\n    const chordFrequencies = this.getChordFrequencies(chordName);\n    \n    chordFrequencies.forEach(frequency => {\n      const oscillator = this.audioContext!.createOscillator();\n      const gain = this.audioContext!.createGain();\n\n      oscillator.connect(gain);\n      gain.connect(this.audioContext!.destination);\n\n      oscillator.frequency.setValueAtTime(frequency, startTime);\n      oscillator.type = 'triangle';\n\n      gain.gain.setValueAtTime(0, startTime);\n      gain.gain.linearRampToValueAtTime(0.1, startTime + 0.1);\n      gain.gain.exponentialRampToValueAtTime(0.001, startTime + duration);\n\n      oscillator.start(startTime);\n      oscillator.stop(startTime + duration);\n    });\n  }\n\n  private getChordFrequencies(chordName: string): number[] {\n    // Simplified chord frequency mapping\n    const chordMap: { [key: string]: number[] } = {\n      'C': [261.63, 329.63, 392.00],\n      'Am': [220.00, 261.63, 329.63],\n      'F': [174.61, 220.00, 261.63, 349.23],\n      'G': [196.00, 246.94, 293.66],\n      'Em': [164.81, 196.00, 246.94],\n      'D': [146.83, 185.00, 233.08],\n      'Dm': [146.83, 174.61, 220.00]\n    };\n\n    return chordMap[chordName] || chordMap['C'];\n  }\n\n  setVolume(volume: number) {\n    if (this.metronomeGain) {\n      this.metronomeGain.gain.value = volume;\n    }\n  }\n\n  destroy() {\n    if (this.audioContext) {\n      this.audioContext.close();\n    }\n  }\n}\n\nexport const audioEngine = new AudioEngine();\n","size_bytes":4163},"client/src/lib/chord-data.ts":{"content":"export interface ChordDiagram {\n  name: string;\n  fullName: string;\n  type: 'Major' | 'Minor' | '7th' | 'Minor 7th' | 'Major 7th' | 'Suspended' | 'Diminished';\n  key: string;\n  frets: (number | 'x')[];  // 6 strings, x for muted\n  fingers: string;\n  difficulty: 'Easy' | 'Medium' | 'Hard';\n}\n\nexport const chordLibrary: ChordDiagram[] = [\n  // C Chords\n  {\n    name: 'C',\n    fullName: 'C Major',\n    type: 'Major',\n    key: 'C',\n    frets: ['x', 3, 2, 0, 1, 0],\n    fingers: '3-2-1',\n    difficulty: 'Easy'\n  },\n  {\n    name: 'Cm',\n    fullName: 'C Minor',\n    type: 'Minor',\n    key: 'C',\n    frets: ['x', 3, 1, 0, 1, 3],\n    fingers: '3-1-1-4',\n    difficulty: 'Medium'\n  },\n  \n  // G Chords\n  {\n    name: 'G',\n    fullName: 'G Major',\n    type: 'Major',\n    key: 'G',\n    frets: [3, 2, 0, 0, 3, 3],\n    fingers: '3-1-4-4',\n    difficulty: 'Easy'\n  },\n  \n  // A Chords\n  {\n    name: 'Am',\n    fullName: 'A Minor',\n    type: 'Minor',\n    key: 'A',\n    frets: ['x', 0, 2, 2, 1, 0],\n    fingers: '2-3-1',\n    difficulty: 'Easy'\n  },\n  {\n    name: 'A',\n    fullName: 'A Major',\n    type: 'Major',\n    key: 'A',\n    frets: ['x', 0, 2, 2, 2, 0],\n    fingers: '1-2-3',\n    difficulty: 'Easy'\n  },\n  \n  // F Chords\n  {\n    name: 'F',\n    fullName: 'F Major',\n    type: 'Major',\n    key: 'F',\n    frets: [1, 3, 3, 2, 1, 1],\n    fingers: '1-3-4-2-1-1',\n    difficulty: 'Hard'\n  },\n  \n  // E Chords\n  {\n    name: 'Em',\n    fullName: 'E Minor',\n    type: 'Minor',\n    key: 'E',\n    frets: [0, 2, 2, 0, 0, 0],\n    fingers: '2-3',\n    difficulty: 'Easy'\n  },\n  {\n    name: 'E',\n    fullName: 'E Major',\n    type: 'Major',\n    key: 'E',\n    frets: [0, 2, 2, 1, 0, 0],\n    fingers: '2-3-1',\n    difficulty: 'Easy'\n  },\n  \n  // D Chords\n  {\n    name: 'D',\n    fullName: 'D Major',\n    type: 'Major',\n    key: 'D',\n    frets: ['x', 'x', 0, 2, 3, 2],\n    fingers: '1-3-2',\n    difficulty: 'Easy'\n  },\n  {\n    name: 'Dm',\n    fullName: 'D Minor',\n    type: 'Minor',\n    key: 'D',\n    frets: ['x', 'x', 0, 2, 3, 1],\n    fingers: '2-3-1',\n    difficulty: 'Easy'\n  },\n  \n  // B Chords\n  {\n    name: 'Bm',\n    fullName: 'B Minor',\n    type: 'Minor',\n    key: 'B',\n    frets: ['x', 2, 4, 4, 3, 2],\n    fingers: '1-3-4-2-1',\n    difficulty: 'Medium'\n  },\n  {\n    name: 'B',\n    fullName: 'B Major',\n    type: 'Major',\n    key: 'B',\n    frets: ['x', 2, 4, 4, 4, 2],\n    fingers: '1-3-4-4-1',\n    difficulty: 'Hard'\n  },\n  {\n    name: 'B7',\n    fullName: 'B Dominant 7th',\n    type: '7th',\n    key: 'B',\n    frets: ['x', 2, 1, 2, 0, 2],\n    fingers: '2-1-3-4',\n    difficulty: 'Medium'\n  },\n\n  // 7th Chords\n  {\n    name: 'A7',\n    fullName: 'A Dominant 7th',\n    type: '7th',\n    key: 'A',\n    frets: ['x', 0, 2, 0, 2, 0],\n    fingers: '2-3',\n    difficulty: 'Easy'\n  },\n  {\n    name: 'D7',\n    fullName: 'D Dominant 7th',\n    type: '7th',\n    key: 'D',\n    frets: ['x', 'x', 0, 2, 1, 2],\n    fingers: '2-1-3',\n    difficulty: 'Easy'\n  },\n  {\n    name: 'E7',\n    fullName: 'E Dominant 7th',\n    type: '7th',\n    key: 'E',\n    frets: [0, 2, 0, 1, 0, 0],\n    fingers: '2-1',\n    difficulty: 'Easy'\n  },\n  {\n    name: 'G7',\n    fullName: 'G Dominant 7th',\n    type: '7th',\n    key: 'G',\n    frets: [3, 2, 0, 0, 0, 1],\n    fingers: '3-2-1',\n    difficulty: 'Easy'\n  },\n  {\n    name: 'C7',\n    fullName: 'C Dominant 7th',\n    type: '7th',\n    key: 'C',\n    frets: ['x', 3, 2, 3, 1, 0],\n    fingers: '3-2-4-1',\n    difficulty: 'Medium'\n  },\n\n  // Minor 7th Chords\n  {\n    name: 'Am7',\n    fullName: 'A Minor 7th',\n    type: 'Minor 7th',\n    key: 'A',\n    frets: ['x', 0, 2, 0, 1, 0],\n    fingers: '2-1',\n    difficulty: 'Easy'\n  },\n  {\n    name: 'Dm7',\n    fullName: 'D Minor 7th',\n    type: 'Minor 7th',\n    key: 'D',\n    frets: ['x', 'x', 0, 2, 1, 1],\n    fingers: '2-1-1',\n    difficulty: 'Easy'\n  },\n  {\n    name: 'Em7',\n    fullName: 'E Minor 7th',\n    type: 'Minor 7th',\n    key: 'E',\n    frets: [0, 2, 2, 0, 3, 0],\n    fingers: '2-3-4',\n    difficulty: 'Easy'\n  },\n  {\n    name: 'Gm7',\n    fullName: 'G Minor 7th',\n    type: 'Minor 7th',\n    key: 'G',\n    frets: [3, 5, 3, 3, 3, 3],\n    fingers: '1-3-1-1-1-1',\n    difficulty: 'Hard'\n  },\n\n  // Major 7th Chords\n  {\n    name: 'Cmaj7',\n    fullName: 'C Major 7th',\n    type: 'Major 7th',\n    key: 'C',\n    frets: ['x', 3, 2, 0, 0, 0],\n    fingers: '3-2',\n    difficulty: 'Easy'\n  },\n  {\n    name: 'Dmaj7',\n    fullName: 'D Major 7th',\n    type: 'Major 7th',\n    key: 'D',\n    frets: ['x', 'x', 0, 2, 2, 2],\n    fingers: '1-2-3',\n    difficulty: 'Easy'\n  },\n  {\n    name: 'Gmaj7',\n    fullName: 'G Major 7th',\n    type: 'Major 7th',\n    key: 'G',\n    frets: [3, 2, 0, 0, 0, 2],\n    fingers: '3-1-2',\n    difficulty: 'Easy'\n  },\n  {\n    name: 'Amaj7',\n    fullName: 'A Major 7th',\n    type: 'Major 7th',\n    key: 'A',\n    frets: ['x', 0, 2, 1, 2, 0],\n    fingers: '2-1-3',\n    difficulty: 'Easy'\n  },\n\n  // Suspended Chords\n  {\n    name: 'Dsus4',\n    fullName: 'D Suspended 4th',\n    type: 'Suspended',\n    key: 'D',\n    frets: ['x', 'x', 0, 2, 3, 3],\n    fingers: '1-2-3',\n    difficulty: 'Easy'\n  },\n  {\n    name: 'Asus4',\n    fullName: 'A Suspended 4th',\n    type: 'Suspended',\n    key: 'A',\n    frets: ['x', 0, 2, 2, 3, 0],\n    fingers: '1-2-3',\n    difficulty: 'Easy'\n  },\n  {\n    name: 'Esus4',\n    fullName: 'E Suspended 4th',\n    type: 'Suspended',\n    key: 'E',\n    frets: [0, 2, 2, 2, 0, 0],\n    fingers: '2-3-4',\n    difficulty: 'Easy'\n  },\n  {\n    name: 'Gsus4',\n    fullName: 'G Suspended 4th',\n    type: 'Suspended',\n    key: 'G',\n    frets: [3, 3, 0, 0, 1, 3],\n    fingers: '3-4-1-3',\n    difficulty: 'Medium'\n  },\n\n  // Additional Major/Minor Chords\n  {\n    name: 'F#m',\n    fullName: 'F# Minor',\n    type: 'Minor',\n    key: 'F#',\n    frets: [2, 4, 4, 2, 2, 2],\n    fingers: '1-3-4-1-1-1',\n    difficulty: 'Hard'\n  },\n  {\n    name: 'Bb',\n    fullName: 'Bb Major',\n    type: 'Major',\n    key: 'Bb',\n    frets: ['x', 1, 3, 3, 3, 1],\n    fingers: '1-2-3-4-1',\n    difficulty: 'Hard'\n  },\n  {\n    name: 'Eb',\n    fullName: 'Eb Major',\n    type: 'Major',\n    key: 'Eb',\n    frets: ['x', 'x', 1, 3, 4, 3],\n    fingers: '1-2-4-3',\n    difficulty: 'Medium'\n  },\n  {\n    name: 'Gm',\n    fullName: 'G Minor',\n    type: 'Minor',\n    key: 'G',\n    frets: [3, 5, 5, 3, 3, 3],\n    fingers: '1-3-4-1-1-1',\n    difficulty: 'Hard'\n  },\n  {\n    name: 'Fm',\n    fullName: 'F Minor',\n    type: 'Minor',\n    key: 'F',\n    frets: [1, 3, 3, 1, 1, 1],\n    fingers: '1-3-4-1-1-1',\n    difficulty: 'Hard'\n  },\n\n  // Add9 Chords\n  {\n    name: 'Cadd9',\n    fullName: 'C Add 9',\n    type: 'Major',\n    key: 'C',\n    frets: ['x', 3, 2, 0, 3, 0],\n    fingers: '2-1-3',\n    difficulty: 'Easy'\n  },\n  {\n    name: 'Gadd9',\n    fullName: 'G Add 9',\n    type: 'Major',\n    key: 'G',\n    frets: [3, 0, 0, 0, 0, 3],\n    fingers: '3-4',\n    difficulty: 'Easy'\n  },\n  {\n    name: 'Dadd9',\n    fullName: 'D Add 9',\n    type: 'Major',\n    key: 'D',\n    frets: ['x', 'x', 0, 2, 3, 0],\n    fingers: '1-2',\n    difficulty: 'Easy'\n  },\n\n  // Diminished Chords\n  {\n    name: 'Bdim',\n    fullName: 'B Diminished',\n    type: 'Diminished',\n    key: 'B',\n    frets: ['x', 2, 3, 1, 3, 1],\n    fingers: '2-3-1-4-1',\n    difficulty: 'Hard'\n  },\n  {\n    name: 'C#dim',\n    fullName: 'C# Diminished',\n    type: 'Diminished',\n    key: 'C#',\n    frets: ['x', 'x', 2, 3, 2, 3],\n    fingers: '1-2-1-3',\n    difficulty: 'Medium'\n  }\n];\n\nexport const getChordsByKey = (key: string) => {\n  if (key === 'All Keys') return chordLibrary;\n  return chordLibrary.filter(chord => chord.key === key);\n};\n\nexport const getChordsByType = (type: string) => {\n  if (type === 'All Types') return chordLibrary;\n  return chordLibrary.filter(chord => chord.type === type);\n};\n\nexport const getFilteredChords = (key: string, type: string) => {\n  let filtered = chordLibrary;\n  \n  if (key !== 'All Keys') {\n    filtered = filtered.filter(chord => chord.key === key);\n  }\n  \n  if (type !== 'All Types') {\n    filtered = filtered.filter(chord => chord.type === type);\n  }\n  \n  return filtered;\n};\n","size_bytes":7954},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/scale-data.ts":{"content":"export interface Scale {\n  name: string;\n  intervals: number[];  // semitones from root\n  pattern: string;      // W = whole step, H = half step\n  notes?: string[];     // calculated notes for specific key\n}\n\nexport interface ScalePosition {\n  position: number;\n  frets: { [string: number]: number[] };  // string -> fret positions\n  rootNotes: { string: number; fret: number }[];\n}\n\nexport const scaleTypes: { [key: string]: Scale } = {\n  'major': {\n    name: 'Major',\n    intervals: [0, 2, 4, 5, 7, 9, 11],\n    pattern: 'W W H W W W H'\n  },\n  'natural_minor': {\n    name: 'Natural Minor',\n    intervals: [0, 2, 3, 5, 7, 8, 10],\n    pattern: 'W H W W H W W'\n  },\n  'harmonic_minor': {\n    name: 'Harmonic Minor',\n    intervals: [0, 2, 3, 5, 7, 8, 11],\n    pattern: 'W H W W H W+H H'\n  },\n  'melodic_minor': {\n    name: 'Melodic Minor',\n    intervals: [0, 2, 3, 5, 7, 9, 11],\n    pattern: 'W H W W W W H'\n  },\n  'dorian': {\n    name: 'Dorian',\n    intervals: [0, 2, 3, 5, 7, 9, 10],\n    pattern: 'W H W W W H W'\n  },\n  'phrygian': {\n    name: 'Phrygian',\n    intervals: [0, 1, 3, 5, 7, 8, 10],\n    pattern: 'H W W W H W W'\n  },\n  'lydian': {\n    name: 'Lydian',\n    intervals: [0, 2, 4, 6, 7, 9, 11],\n    pattern: 'W W W H W W H'\n  },\n  'mixolydian': {\n    name: 'Mixolydian',\n    intervals: [0, 2, 4, 5, 7, 9, 10],\n    pattern: 'W W H W W H W'\n  },\n  'locrian': {\n    name: 'Locrian',\n    intervals: [0, 1, 3, 5, 6, 8, 10],\n    pattern: 'H W W H W W W'\n  },\n  'pentatonic_major': {\n    name: 'Pentatonic Major',\n    intervals: [0, 2, 4, 7, 9],\n    pattern: 'W W W+H W W+H'\n  },\n  'pentatonic_minor': {\n    name: 'Pentatonic Minor',\n    intervals: [0, 3, 5, 7, 10],\n    pattern: 'W+H W W W+H W'\n  },\n  'blues': {\n    name: 'Blues',\n    intervals: [0, 3, 5, 6, 7, 10],\n    pattern: 'W+H W H H W+H W'\n  }\n};\n\nexport const noteNames = ['C', 'C#/Db', 'D', 'D#/Eb', 'E', 'F', 'F#/Gb', 'G', 'G#/Ab', 'A', 'A#/Bb', 'B'];\n\n// Convert semitone intervals to scale degree numbers\nexport const intervalsToScaleDegrees = (intervals: number[]): string[] => {\n  return intervals.map((interval, index) => {\n    if (index === 0) return '1';\n    return (index + 1).toString();\n  });\n};\n\nexport const generateScaleNotes = (root: string, scaleType: string): string[] => {\n  const rootIndex = noteNames.findIndex(note => note.includes(root));\n  const scale = scaleTypes[scaleType];\n  \n  if (rootIndex === -1 || !scale) return [];\n  \n  return scale.intervals.map(interval => {\n    const noteIndex = (rootIndex + interval) % 12;\n    return noteNames[noteIndex];\n  });\n};\n\n// Guitar fretboard positions for C Major Scale - Position 1\nexport const cMajorPosition1: ScalePosition = {\n  position: 1,\n  frets: {\n    1: [0, 3, 5, 7, 8, 10, 12], // High E string\n    2: [1, 3, 5, 6, 8, 10, 12], // B string  \n    3: [0, 2, 4, 5, 7, 9, 10, 12], // G string\n    4: [0, 2, 3, 5, 7, 9, 10, 12], // D string\n    5: [0, 2, 3, 5, 7, 8, 10, 12], // A string\n    6: [0, 3, 5, 7, 8, 10, 12] // Low E string\n  },\n  rootNotes: [\n    { string: 1, fret: 8 },   // High E - C\n    { string: 2, fret: 1 },   // B - C  \n    { string: 3, fret: 5 },   // G - C\n    { string: 4, fret: 10 },  // D - C\n    { string: 5, fret: 3 },   // A - C\n    { string: 6, fret: 8 }    // Low E - C\n  ]\n};\n\n// Calculate fret positions for any scale in any key\nexport const calculateScalePosition = (root: string, scaleType: string, position: number): ScalePosition => {\n  const scale = scaleTypes[scaleType];\n  if (!scale) return cMajorPosition1;\n  \n  const rootIndex = noteNames.findIndex(note => note.includes(root));\n  if (rootIndex === -1) return cMajorPosition1;\n  \n  // Define fret ranges for each position (guitar scale box patterns)\n  const positionRanges: { [pos: number]: { start: number; end: number } } = {\n    1: { start: 0, end: 4 },   // Open position to 4th fret\n    2: { start: 2, end: 6 },   // 2nd to 6th fret  \n    3: { start: 4, end: 8 },   // 4th to 8th fret\n    4: { start: 7, end: 11 },  // 7th to 11th fret\n    5: { start: 9, end: 13 }   // 9th to 13th fret\n  };\n  \n  const range = positionRanges[position] || positionRanges[1];\n  \n  // Standard guitar tuning from 6th string (low E) to 1st string (high E)\n  const stringTuning = [4, 9, 2, 7, 11, 4]; // E A D G B E (semitones from C)\n  \n  const scalePositions: { [string: number]: number[] } = {};\n  const rootNotes: { string: number; fret: number }[] = [];\n  \n  // Calculate positions for each string within the position range\n  for (let stringNum = 1; stringNum <= 6; stringNum++) {\n    const stringOpenNote = stringTuning[stringNum - 1];\n    const positions: number[] = [];\n    \n    // Check only frets within the position range\n    for (let fret = range.start; fret <= range.end; fret++) {\n      const fretNote = (stringOpenNote + fret) % 12;\n      \n      // Check if this fret contains any note from our scale\n      scale.intervals.forEach((interval, noteIndex) => {\n        const scaleNoteIndex = (rootIndex + interval) % 12;\n        if (fretNote === scaleNoteIndex) {\n          positions.push(fret);\n          // Mark root notes\n          if (interval === 0) {\n            rootNotes.push({ string: stringNum, fret });\n          }\n        }\n      });\n    }\n    \n    scalePositions[stringNum] = Array.from(new Set(positions)).sort((a, b) => a - b);\n  }\n  \n  return {\n    position,\n    frets: scalePositions,\n    rootNotes\n  };\n};\n\nexport const getScalePosition = (root: string, scaleType: string, position: number): ScalePosition => {\n  return calculateScalePosition(root, scaleType, position);\n};\n\nexport const getScaleFrequencies = (root: string, scaleType: string): number[] => {\n  const notes = generateScaleNotes(root, scaleType);\n  const baseFrequencies: { [key: string]: number } = {\n    'C': 261.63, 'C#/Db': 277.18, 'D': 293.66, 'D#/Eb': 311.13,\n    'E': 329.63, 'F': 349.23, 'F#/Gb': 369.99, 'G': 392.00,\n    'G#/Ab': 415.30, 'A': 440.00, 'A#/Bb': 466.16, 'B': 493.88\n  };\n  \n  return notes.map(note => baseFrequencies[note] || 440);\n};\n","size_bytes":5961},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/home.tsx":{"content":"import { useState } from 'react';\nimport Header from '@/components/header';\nimport Metronome from '@/components/metronome';\nimport ChordLibrary from '@/components/chord-library';\nimport Scales from '@/components/scales';\nimport Tuner from '@/components/tuner';\nimport Practice from '@/components/practice';\nimport PracticeSchedule from '@/components/practice-schedule';\nimport PracticeHistory from '@/components/practice-history';\nimport { ScheduleProvider } from '@/contexts/ScheduleContext';\n\nexport default function Home() {\n  const [activeTab, setActiveTab] = useState('metronome');\n\n  const renderActiveComponent = () => {\n    switch (activeTab) {\n      case 'metronome':\n        return <Metronome />;\n      case 'chords':\n        return <ChordLibrary />;\n      case 'scales':\n        return <Scales />;\n      case 'tuner':\n        return <Tuner />;\n      case 'practice':\n        return <Practice />;\n      case 'schedule':\n        return <PracticeSchedule />;\n      case 'history':\n        return <PracticeHistory />;\n      default:\n        return <Metronome />;\n    }\n  };\n\n  return (\n    <ScheduleProvider>\n      <div className=\"min-h-screen bg-[#0f172a] text-slate-100\">\n        <Header activeTab={activeTab} onTabChange={setActiveTab} />\n        \n        <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          {renderActiveComponent()}\n        </main>\n      </div>\n    </ScheduleProvider>\n  );\n}\n","size_bytes":1425},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/spotify.ts":{"content":"import { SpotifyApi } from \"@spotify/web-api-ts-sdk\";\n\nlet connectionSettings: any;\n\nasync function getAccessToken() {\n  if (connectionSettings && connectionSettings.settings.expires_at && new Date(connectionSettings.settings.expires_at).getTime() > Date.now()) {\n    return connectionSettings.settings.access_token;\n  }\n  \n  const hostname = process.env.REPLIT_CONNECTORS_HOSTNAME\n  const xReplitToken = process.env.REPL_IDENTITY \n    ? 'repl ' + process.env.REPL_IDENTITY \n    : process.env.WEB_REPL_RENEWAL \n    ? 'depl ' + process.env.WEB_REPL_RENEWAL \n    : null;\n\n  if (!xReplitToken) {\n    throw new Error('X_REPLIT_TOKEN not found for repl/depl');\n  }\n\n  connectionSettings = await fetch(\n    'https://' + hostname + '/api/v2/connection?include_secrets=true&connector_names=spotify',\n    {\n      headers: {\n        'Accept': 'application/json',\n        'X_REPLIT_TOKEN': xReplitToken\n      }\n    }\n  ).then(res => res.json()).then(data => data.items?.[0]);\n   const refreshToken =\n    connectionSettings?.settings?.oauth?.credentials?.refresh_token;\n  const accessToken = connectionSettings?.settings?.access_token || connectionSettings.settings?.oauth?.credentials?.access_token;\nconst clientId = connectionSettings?.settings?.oauth?.credentials?.client_id;\n  const expiresIn = connectionSettings.settings?.oauth?.credentials?.expires_in;\n  if (!connectionSettings || (!accessToken || !clientId || !refreshToken)) {\n    throw new Error('Spotify not connected');\n  }\n  return {accessToken, clientId, refreshToken, expiresIn};\n}\n\n// WARNING: Never cache this client.\n// Access tokens expire, so a new client must be created each time.\n// Always call this function again to get a fresh client.\nexport async function getUncachableSpotifyClient() {\n  const {accessToken, clientId, refreshToken, expiresIn} = await getAccessToken();\n\n  const spotify = SpotifyApi.withAccessToken(clientId, {\n    access_token: accessToken,\n    token_type: \"Bearer\",\n    expires_in: expiresIn || 3600,\n    refresh_token: refreshToken,\n  });\n\n  return spotify;\n}\n\n// Helper function to convert Spotify track to our song format\nexport function convertSpotifyTrackToSong(track: any) {\n  return {\n    title: track.name,\n    artist: track.artists.map((artist: any) => artist.name).join(', '),\n    album: track.album?.name || null,\n    genre: null, // Spotify doesn't provide genre in track object\n    key: null, // Will be populated from audio features\n    capo: 0,\n    tempo: null, // Will be populated from audio features\n    timeSignature: \"4/4\", // Will be populated from audio features\n    difficulty: 1, // Default, can be set manually\n    duration: Math.round(track.duration_ms / 1000), // Convert to seconds\n    spotifyId: track.id,\n    chordProgression: null, // To be populated separately\n    lyrics: null,\n    tabs: null,\n    notes: null,\n  };\n}\n\n// Helper function to get audio features for a track\nexport async function getTrackAudioFeatures(trackId: string) {\n  const spotify = await getUncachableSpotifyClient();\n  const features = await spotify.tracks.audioFeatures(trackId);\n  \n  return {\n    key: getKeyFromSpotify(features.key, features.mode),\n    tempo: Math.round(features.tempo),\n    timeSignature: `${features.time_signature}/4`,\n    energy: features.energy,\n    danceability: features.danceability,\n    valence: features.valence,\n  };\n}\n\n// Convert Spotify key number to music notation\nfunction getKeyFromSpotify(key: number, mode: number): string {\n  const keys = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n  const keyName = keys[key] || 'C';\n  return mode === 0 ? `${keyName}m` : keyName; // 0 = minor, 1 = major\n}","size_bytes":3643},"client/src/contexts/ScheduleContext.tsx":{"content":"import { createContext, useContext, useState, ReactNode } from 'react';\n\nexport interface ScheduledPractice {\n  id: string;\n  title: string;\n  dayOfWeek: number; // 0 = Sunday, 1 = Monday, etc.\n  startTime: string; // HH:MM format\n  duration: number; // in minutes\n  exercises: {\n    title: string;\n    duration: number;\n    type?: string;\n  }[];\n  isActive: boolean;\n}\n\ninterface ScheduleContextType {\n  schedules: ScheduledPractice[];\n  setSchedules: (schedules: ScheduledPractice[]) => void;\n  getTodaysSchedules: () => ScheduledPractice[];\n  getActiveSchedulesForDay: (dayOfWeek: number) => ScheduledPractice[];\n}\n\nconst ScheduleContext = createContext<ScheduleContextType | undefined>(undefined);\n\nconst mockSchedules: ScheduledPractice[] = [\n  {\n    id: '1',\n    title: 'Morning Practice',\n    dayOfWeek: 1, // Monday\n    startTime: '08:00',\n    duration: 30,\n    exercises: [\n      { title: 'Warm-up', duration: 5, type: 'warmup' },\n      { title: 'Chord Practice', duration: 15, type: 'chords' },\n      { title: 'Scale Practice', duration: 10, type: 'scales' }\n    ],\n    isActive: true\n  },\n  {\n    id: '2',\n    title: 'Evening Session',\n    dayOfWeek: 3, // Wednesday\n    startTime: '18:30',\n    duration: 45,\n    exercises: [\n      { title: 'Technique Practice', duration: 20, type: 'technique' },\n      { title: 'Song Practice', duration: 25, type: 'songs' }\n    ],\n    isActive: true\n  },\n  {\n    id: '3',\n    title: 'Weekend Practice',\n    dayOfWeek: 6, // Saturday\n    startTime: '10:00',\n    duration: 60,\n    exercises: [\n      { title: 'Scale Mastery', duration: 20, type: 'scales' },\n      { title: 'Chord Progressions', duration: 20, type: 'chords' },\n      { title: 'Song Learning', duration: 20, type: 'songs' }\n    ],\n    isActive: false\n  }\n];\n\nexport function ScheduleProvider({ children }: { children: ReactNode }) {\n  const [schedules, setSchedules] = useState<ScheduledPractice[]>(mockSchedules);\n\n  const getTodaysSchedules = () => {\n    const today = new Date().getDay();\n    return schedules.filter(schedule => \n      schedule.dayOfWeek === today && schedule.isActive\n    );\n  };\n\n  const getActiveSchedulesForDay = (dayOfWeek: number) => {\n    return schedules.filter(schedule => \n      schedule.dayOfWeek === dayOfWeek && schedule.isActive\n    );\n  };\n\n  return (\n    <ScheduleContext.Provider value={{\n      schedules,\n      setSchedules,\n      getTodaysSchedules,\n      getActiveSchedulesForDay\n    }}>\n      {children}\n    </ScheduleContext.Provider>\n  );\n}\n\nexport function useSchedule() {\n  const context = useContext(ScheduleContext);\n  if (context === undefined) {\n    throw new Error('useSchedule must be used within a ScheduleProvider');\n  }\n  return context;\n}","size_bytes":2703},"client/src/hooks/use-quick-presets.ts":{"content":"import { useState, useEffect } from 'react';\nimport { nanoid } from 'nanoid';\nimport { QuickPreset, InsertQuickPreset, quickPresetSchema } from '@shared/schema';\n\nconst STORAGE_KEY = 'quickPresets';\n\nconst defaultPresets: QuickPreset[] = [\n  {\n    id: 'warmup-default',\n    title: '5-Minute Warm-up',\n    description: 'Basic stretches and scales',\n    exercises: [\n      { title: 'Finger Stretches', duration: 2, type: 'warmup' },\n      { title: 'Chromatic Exercise', duration: 3, type: 'warmup' }\n    ]\n  },\n  {\n    id: 'chords-default',\n    title: '15-Minute Chord Practice',\n    description: 'Focus on chord changes',\n    exercises: [\n      { title: 'Open Chord Practice', duration: 5, type: 'chords' },\n      { title: 'Chord Transitions', duration: 5, type: 'chords' },\n      { title: 'Strumming Patterns', duration: 5, type: 'chords' }\n    ]\n  },\n  {\n    id: 'scales-default',\n    title: '20-Minute Scale Session',\n    description: 'Scale patterns and exercises',\n    exercises: [\n      { title: 'C Major Scale - Position 1', duration: 7, type: 'scales' },\n      { title: 'Scale Sequences', duration: 7, type: 'scales' },\n      { title: 'Scale Applications', duration: 6, type: 'scales' }\n    ]\n  },\n  {\n    id: 'technique-default',\n    title: '30-Minute Technique',\n    description: 'Advanced techniques and exercises',\n    exercises: [\n      { title: 'Alternate Picking', duration: 8, type: 'technique' },\n      { title: 'Legato Practice', duration: 7, type: 'technique' },\n      { title: 'String Skipping', duration: 8, type: 'technique' },\n      { title: 'Vibrato Exercise', duration: 7, type: 'technique' }\n    ]\n  },\n  {\n    id: 'theory-default',\n    title: '25-Minute Theory Study',\n    description: 'Music theory concepts and analysis',\n    exercises: [\n      { title: 'Circle of Fifths Study', duration: 10, type: 'theory' },\n      { title: 'Interval Recognition', duration: 8, type: 'theory' },\n      { title: 'Scale Modes Analysis', duration: 7, type: 'theory' }\n    ]\n  }\n];\n\nexport function useQuickPresets() {\n  const [presets, setPresets] = useState<QuickPreset[]>([]);\n\n  // Load presets from localStorage on mount\n  useEffect(() => {\n    const stored = localStorage.getItem(STORAGE_KEY);\n    if (stored) {\n      try {\n        const parsed = JSON.parse(stored);\n        setPresets(parsed);\n      } catch (error) {\n        console.error('Failed to parse stored presets:', error);\n        setPresets(defaultPresets);\n        localStorage.setItem(STORAGE_KEY, JSON.stringify(defaultPresets));\n      }\n    } else {\n      // First time - seed with defaults\n      setPresets(defaultPresets);\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(defaultPresets));\n    }\n  }, []);\n\n  // Save presets to localStorage whenever they change\n  useEffect(() => {\n    if (presets.length > 0) {\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(presets));\n    }\n  }, [presets]);\n\n  const createPreset = (data: InsertQuickPreset): QuickPreset => {\n    const newPreset: QuickPreset = {\n      id: nanoid(),\n      ...data\n    };\n\n    // Validate before adding\n    const result = quickPresetSchema.safeParse(newPreset);\n    if (!result.success) {\n      throw new Error('Invalid preset data: ' + result.error.message);\n    }\n\n    setPresets(prev => [...prev, newPreset]);\n    return newPreset;\n  };\n\n  const updatePreset = (id: string, updates: Partial<InsertQuickPreset>): QuickPreset => {\n    const existingPreset = presets.find(p => p.id === id);\n    if (!existingPreset) {\n      throw new Error('Preset not found');\n    }\n\n    const updatedPreset = { ...existingPreset, ...updates };\n    \n    // Validate before updating\n    const result = quickPresetSchema.safeParse(updatedPreset);\n    if (!result.success) {\n      throw new Error('Invalid preset data: ' + result.error.message);\n    }\n\n    setPresets(prev => prev.map(p => p.id === id ? updatedPreset : p));\n    return updatedPreset;\n  };\n\n  const deletePreset = (id: string): void => {\n    setPresets(prev => prev.filter(p => p.id !== id));\n  };\n\n  const getPreset = (id: string): QuickPreset | undefined => {\n    return presets.find(p => p.id === id);\n  };\n\n  const duplicatePreset = (id: string): QuickPreset => {\n    const preset = getPreset(id);\n    if (!preset) {\n      throw new Error('Preset not found');\n    }\n\n    return createPreset({\n      title: `${preset.title} (Copy)`,\n      description: preset.description,\n      exercises: [...preset.exercises]\n    });\n  };\n\n  return {\n    presets,\n    createPreset,\n    updatePreset,\n    deletePreset,\n    getPreset,\n    duplicatePreset\n  };\n}","size_bytes":4559},"client/src/pages/songs.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { \n  Music, \n  Search, \n  Plus, \n  Play, \n  Clock, \n  Users, \n  Star,\n  Filter,\n  Heart,\n  ExternalLink,\n  Shuffle,\n  Edit\n} from 'lucide-react';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport type { Song, SongCollection } from '@shared/schema';\n\ninterface SearchFilters {\n  genre: string;\n  difficulty: string;\n  artist: string;\n}\n\n// Form validation schema for creating collections\nconst createCollectionSchema = z.object({\n  name: z.string().min(1, \"Collection name is required\").max(100, \"Name must be less than 100 characters\"),\n  description: z.string().optional(),\n  category: z.enum(['genre', 'difficulty', 'artist', 'custom']).optional(),\n  isPublic: z.boolean().default(false)\n});\n\ntype CreateCollectionFormData = z.infer<typeof createCollectionSchema>;\n\nexport default function SongsPage() {\n  const { toast } = useToast();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filters, setFilters] = useState<SearchFilters>({\n    genre: 'all',\n    difficulty: 'all', \n    artist: ''\n  });\n  const [selectedSong, setSelectedSong] = useState<Song | null>(null);\n  const [showAddSong, setShowAddSong] = useState(false);\n  const [showCreateCollection, setShowCreateCollection] = useState(false);\n  const [activeTab, setActiveTab] = useState('library');\n\n  // Fetch songs with search and filters\n  const { data: songs = [], isLoading: songsLoading } = useQuery<Song[]>({\n    queryKey: ['/api/songs', searchQuery, filters],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (searchQuery) params.set('q', searchQuery);\n      if (filters.genre !== 'all') params.set('genre', filters.genre);\n      if (filters.difficulty !== 'all') params.set('difficulty', filters.difficulty);\n      if (filters.artist) params.set('artist', filters.artist);\n      \n      const url = `/api/songs?${params.toString()}`;\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error('Failed to fetch songs');\n      }\n      return response.json();\n    },\n    enabled: activeTab === 'library'\n  });\n\n  // Fetch song collections\n  const { data: collections = [], isLoading: collectionsLoading } = useQuery<SongCollection[]>({\n    queryKey: ['/api/song-collections'],\n    queryFn: async () => {\n      const response = await fetch('/api/song-collections');\n      if (!response.ok) {\n        throw new Error('Failed to fetch song collections');\n      }\n      return response.json();\n    },\n    enabled: activeTab === 'collections'\n  });\n\n  // Search Spotify tracks\n  const searchSpotifyMutation = useMutation({\n    mutationFn: async (query: string) => {\n      const response = await fetch(`/api/spotify/search?q=${encodeURIComponent(query)}`);\n      return response.json();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Search failed\",\n        description: \"Could not search Spotify tracks\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Add song from Spotify\n  const addSongFromSpotifyMutation = useMutation({\n    mutationFn: async (spotifyTrack: any) => {\n      return apiRequest('/api/songs/from-spotify', 'POST', {\n        spotifyTrack\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/songs'] });\n      toast({\n        title: \"Song added!\",\n        description: \"Successfully added song to your library\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Failed to add song\",\n        description: \"Please try again\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Create collection mutation\n  const createCollectionMutation = useMutation({\n    mutationFn: async (collectionData: CreateCollectionFormData) => {\n      return apiRequest('POST', '/api/song-collections', {\n        ...collectionData,\n        songIds: [] // Start with empty collection\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/song-collections'] });\n      setShowCreateCollection(false);\n      toast({\n        title: \"Collection created!\",\n        description: \"Your new song collection has been created\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Failed to create collection\",\n        description: \"Please try again\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleSearch = (query: string) => {\n    setSearchQuery(query);\n  };\n\n  const handleFilterChange = (key: keyof SearchFilters, value: string) => {\n    setFilters(prev => ({ ...prev, [key]: value }));\n  };\n\n  const clearFilters = () => {\n    setFilters({ genre: 'all', difficulty: 'all', artist: '' });\n    setSearchQuery('');\n  };\n\n  const handleSpotifySearch = () => {\n    if (searchQuery.trim()) {\n      searchSpotifyMutation.mutate(searchQuery);\n    }\n  };\n\n  const handleAddFromSpotify = (track: any) => {\n    addSongFromSpotifyMutation.mutate(track);\n  };\n\n  // Form for creating collections\n  const createCollectionForm = useForm<CreateCollectionFormData>({\n    resolver: zodResolver(createCollectionSchema),\n    defaultValues: {\n      name: '',\n      description: '',\n      category: 'custom',\n      isPublic: true // Make collections public by default since there's no user authentication\n    }\n  });\n\n  const handleCreateCollection = () => {\n    setShowCreateCollection(true);\n  };\n\n  const onCreateCollectionSubmit = (data: CreateCollectionFormData) => {\n    createCollectionMutation.mutate(data);\n  };\n\n  const getDifficultyColor = (difficulty: number | null) => {\n    if (!difficulty) return 'bg-gray-500';\n    const colors = {\n      1: 'bg-green-500',\n      2: 'bg-lime-500', \n      3: 'bg-yellow-500',\n      4: 'bg-orange-500',\n      5: 'bg-red-500'\n    };\n    return colors[difficulty as keyof typeof colors] || colors[1];\n  };\n\n  const getDifficultyLabel = (difficulty: number | null) => {\n    if (!difficulty) return 'Unknown';\n    const labels = {\n      1: 'Beginner',\n      2: 'Easy',\n      3: 'Intermediate', \n      4: 'Advanced',\n      5: 'Expert'\n    };\n    return labels[difficulty as keyof typeof labels] || 'Unknown';\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-7xl\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-white mb-2\">Song Library</h1>\n        <p className=\"text-slate-400\">\n          Build your personal collection of songs to practice with chord progressions, tempo tracking, and more.\n        </p>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3 bg-slate-800\">\n          <TabsTrigger \n            value=\"library\" \n            className=\"data-[state=active]:bg-slate-700 text-slate-300\"\n            data-testid=\"tab-library\"\n          >\n            <Music className=\"w-4 h-4 mr-2\" />\n            My Library\n          </TabsTrigger>\n          <TabsTrigger \n            value=\"collections\" \n            className=\"data-[state=active]:bg-slate-700 text-slate-300\"\n            data-testid=\"tab-collections\"\n          >\n            <Users className=\"w-4 h-4 mr-2\" />\n            Collections\n          </TabsTrigger>\n          <TabsTrigger \n            value=\"discover\" \n            className=\"data-[state=active]:bg-slate-700 text-slate-300\"\n            data-testid=\"tab-discover\"\n          >\n            <ExternalLink className=\"w-4 h-4 mr-2\" />\n            Add from Spotify\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Search and Filters */}\n        <div className=\"flex flex-col md:flex-row gap-4 my-6\">\n          <div className=\"flex-1 relative\">\n            <Search className=\"absolute left-3 top-3 h-4 w-4 text-slate-400\" />\n            <Input\n              placeholder=\"Search songs, artists, or albums...\"\n              value={searchQuery}\n              onChange={(e) => handleSearch(e.target.value)}\n              className=\"pl-10 bg-slate-800 border-slate-700 text-white\"\n              data-testid=\"input-search-songs\"\n            />\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Select value={filters.genre} onValueChange={(value) => handleFilterChange('genre', value)}>\n              <SelectTrigger className=\"w-32 bg-slate-800 border-slate-700 text-white\" data-testid=\"select-genre\">\n                <SelectValue placeholder=\"Genre\" />\n              </SelectTrigger>\n              <SelectContent className=\"bg-slate-800 border-slate-700\">\n                <SelectItem value=\"all\">All Genres</SelectItem>\n                <SelectItem value=\"rock\">Rock</SelectItem>\n                <SelectItem value=\"pop\">Pop</SelectItem>\n                <SelectItem value=\"country\">Country</SelectItem>\n                <SelectItem value=\"blues\">Blues</SelectItem>\n                <SelectItem value=\"folk\">Folk</SelectItem>\n                <SelectItem value=\"jazz\">Jazz</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={filters.difficulty} onValueChange={(value) => handleFilterChange('difficulty', value)}>\n              <SelectTrigger className=\"w-32 bg-slate-800 border-slate-700 text-white\" data-testid=\"select-difficulty\">\n                <SelectValue placeholder=\"Level\" />\n              </SelectTrigger>\n              <SelectContent className=\"bg-slate-800 border-slate-700\">\n                <SelectItem value=\"all\">All Levels</SelectItem>\n                <SelectItem value=\"1\">Beginner</SelectItem>\n                <SelectItem value=\"2\">Easy</SelectItem>\n                <SelectItem value=\"3\">Intermediate</SelectItem>\n                <SelectItem value=\"4\">Advanced</SelectItem>\n                <SelectItem value=\"5\">Expert</SelectItem>\n              </SelectContent>\n            </Select>\n\n            {(searchQuery || filters.genre !== 'all' || filters.difficulty !== 'all' || filters.artist) && (\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={clearFilters}\n                className=\"border-slate-700 text-slate-300 hover:bg-slate-700\"\n                data-testid=\"button-clear-filters\"\n              >\n                <Filter className=\"w-4 h-4 mr-1\" />\n                Clear\n              </Button>\n            )}\n          </div>\n        </div>\n\n        <TabsContent value=\"library\" className=\"mt-6\">\n          {songsLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(6)].map((_, i) => (\n                <Card key={i} className=\"bg-slate-800 border-slate-700 animate-pulse\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-4 bg-slate-700 rounded mb-2\" />\n                    <div className=\"h-3 bg-slate-700 rounded mb-4 w-2/3\" />\n                    <div className=\"flex gap-2 mb-3\">\n                      <div className=\"h-5 bg-slate-700 rounded px-2 py-1 w-16\" />\n                      <div className=\"h-5 bg-slate-700 rounded px-2 py-1 w-12\" />\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : songs.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {(songs as Song[]).map((song: Song) => (\n                <Card \n                  key={song.id} \n                  className=\"bg-slate-800 border-slate-700 hover:border-slate-600 transition-colors cursor-pointer\"\n                  onClick={() => setSelectedSong(song)}\n                  data-testid={`card-song-${song.id}`}\n                >\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-lg text-white flex items-center justify-between\">\n                      <span className=\"truncate\">{song.title}</span>\n                      {song.spotifyId && (\n                        <ExternalLink className=\"w-4 h-4 text-green-500 flex-shrink-0\" />\n                      )}\n                    </CardTitle>\n                    <p className=\"text-slate-400 text-sm truncate\">{song.artist}</p>\n                    {song.album && (\n                      <p className=\"text-slate-500 text-xs truncate\">{song.album}</p>\n                    )}\n                  </CardHeader>\n                  <CardContent className=\"pt-0\">\n                    <div className=\"flex flex-wrap gap-2 mb-3\">\n                      <Badge \n                        className={`${getDifficultyColor(song.difficulty)} text-white text-xs`}\n                        data-testid={`badge-difficulty-${song.id}`}\n                      >\n                        {getDifficultyLabel(song.difficulty)}\n                      </Badge>\n                      {song.key && (\n                        <Badge variant=\"outline\" className=\"border-slate-600 text-slate-300 text-xs\">\n                          Key: {song.key}\n                        </Badge>\n                      )}\n                      {song.tempo && (\n                        <Badge variant=\"outline\" className=\"border-slate-600 text-slate-300 text-xs\">\n                          {song.tempo} BPM\n                        </Badge>\n                      )}\n                    </div>\n                    \n                    <div className=\"flex items-center gap-4 text-xs text-slate-500\">\n                      {song.duration && (\n                        <div className=\"flex items-center gap-1\">\n                          <Clock className=\"w-3 h-3\" />\n                          {Math.floor(song.duration / 60)}:{(song.duration % 60).toString().padStart(2, '0')}\n                        </div>\n                      )}\n                      <div className=\"flex items-center gap-1\">\n                        <Music className=\"w-3 h-3\" />\n                        {song.timeSignature || '4/4'}\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex gap-2 mt-4\">\n                      <Button \n                        size=\"sm\" \n                        className=\"flex-1 bg-blue-600 hover:bg-blue-500\"\n                        data-testid={`button-practice-${song.id}`}\n                      >\n                        <Play className=\"w-4 h-4 mr-1\" />\n                        Practice\n                      </Button>\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\"\n                        className=\"border-slate-600 text-slate-300 hover:bg-slate-700\"\n                        data-testid={`button-favorite-${song.id}`}\n                      >\n                        <Heart className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <Music className=\"w-12 h-12 text-slate-600 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-slate-300 mb-2\">No songs found</h3>\n              <p className=\"text-slate-500 mb-4\">\n                {searchQuery || filters.genre !== 'all' || filters.difficulty !== 'all' \n                  ? 'Try adjusting your search or filters'\n                  : 'Add songs to your library to get started'\n                }\n              </p>\n              <Button \n                onClick={() => setActiveTab('discover')} \n                className=\"bg-blue-600 hover:bg-blue-500\"\n                data-testid=\"button-add-first-song\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Songs from Spotify\n              </Button>\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"discover\" className=\"mt-6\">\n          <Card className=\"bg-slate-800 border-slate-700 mb-6\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <ExternalLink className=\"w-5 h-5 text-green-500\" />\n                Search Spotify\n              </CardTitle>\n              <p className=\"text-slate-400\">Find songs on Spotify and add them to your library with chord progressions.</p>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex gap-2\">\n                <Input\n                  placeholder=\"Search for songs, artists, or albums on Spotify...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  onKeyDown={(e) => e.key === 'Enter' && handleSpotifySearch()}\n                  className=\"bg-slate-900 border-slate-700 text-white\"\n                  data-testid=\"input-spotify-search\"\n                />\n                <Button \n                  onClick={handleSpotifySearch}\n                  disabled={searchSpotifyMutation.isPending || !searchQuery.trim()}\n                  className=\"bg-green-600 hover:bg-green-500\"\n                  data-testid=\"button-spotify-search\"\n                >\n                  <Search className=\"w-4 h-4 mr-2\" />\n                  Search\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {searchSpotifyMutation.isPending && (\n            <div className=\"text-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-green-500 mx-auto mb-4\" />\n              <p className=\"text-slate-400\">Searching Spotify...</p>\n            </div>\n          )}\n\n          {searchSpotifyMutation.data && searchSpotifyMutation.data.tracks && (\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold text-white\">Search Results</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {searchSpotifyMutation.data.tracks.items?.map((track: any) => (\n                  <Card key={track.id} className=\"bg-slate-800 border-slate-700\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex gap-4\">\n                        {track.album?.images?.[2] && (\n                          <img \n                            src={track.album.images[2].url} \n                            alt={track.album.name}\n                            className=\"w-16 h-16 rounded\"\n                          />\n                        )}\n                        <div className=\"flex-1 min-w-0\">\n                          <h4 className=\"font-semibold text-white truncate\">{track.name}</h4>\n                          <p className=\"text-slate-400 text-sm truncate\">\n                            {track.artists.map((a: any) => a.name).join(', ')}\n                          </p>\n                          <p className=\"text-slate-500 text-xs truncate\">{track.album.name}</p>\n                          <p className=\"text-slate-500 text-xs mt-1\">\n                            {Math.floor(track.duration_ms / 60000)}:{((track.duration_ms % 60000) / 1000).toFixed(0).padStart(2, '0')}\n                          </p>\n                        </div>\n                        <Button\n                          size=\"sm\"\n                          onClick={() => handleAddFromSpotify(track)}\n                          disabled={addSongFromSpotifyMutation.isPending}\n                          className=\"bg-blue-600 hover:bg-blue-500 self-start\"\n                          data-testid={`button-add-spotify-${track.id}`}\n                        >\n                          <Plus className=\"w-4 h-4 mr-1\" />\n                          Add\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"collections\" className=\"mt-6\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <div>\n              <h2 className=\"text-xl font-bold text-white\">Song Collections</h2>\n              <p className=\"text-slate-400\">Organize your songs into practice collections</p>\n            </div>\n            <Button \n              onClick={handleCreateCollection}\n              className=\"bg-blue-600 hover:bg-blue-500\" \n              data-testid=\"button-create-collection\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Create Collection\n            </Button>\n          </div>\n\n          {collectionsLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(3)].map((_, i) => (\n                <Card key={i} className=\"bg-slate-800 border-slate-700 animate-pulse\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-4 bg-slate-700 rounded mb-2\" />\n                    <div className=\"h-3 bg-slate-700 rounded mb-4 w-2/3\" />\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : collections.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {collections.map((collection: SongCollection) => (\n                <Card \n                  key={collection.id} \n                  className=\"bg-slate-800 border-slate-700 hover:border-slate-600 transition-colors cursor-pointer\"\n                  data-testid={`card-collection-${collection.id}`}\n                >\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-lg text-white flex items-center justify-between\">\n                      <span className=\"truncate\">{collection.name}</span>\n                      <Users className=\"w-4 h-4 text-blue-500 flex-shrink-0\" />\n                    </CardTitle>\n                    {collection.description && (\n                      <p className=\"text-slate-400 text-sm\">{collection.description}</p>\n                    )}\n                  </CardHeader>\n                  <CardContent className=\"pt-0\">\n                    <div className=\"flex flex-wrap gap-2 mb-3\">\n                      {collection.category && (\n                        <Badge variant=\"outline\" className=\"border-slate-600 text-slate-300 text-xs\">\n                          {collection.category}\n                        </Badge>\n                      )}\n                      <Badge variant=\"outline\" className=\"border-slate-600 text-slate-300 text-xs\">\n                        {(collection.songIds as string[])?.length || 0} songs\n                      </Badge>\n                      {collection.isPublic && (\n                        <Badge variant=\"outline\" className=\"border-green-600 text-green-400 text-xs\">\n                          Public\n                        </Badge>\n                      )}\n                    </div>\n                    \n                    <div className=\"flex gap-2 mt-4\">\n                      <Button \n                        size=\"sm\" \n                        className=\"flex-1 bg-blue-600 hover:bg-blue-500\"\n                        data-testid={`button-open-collection-${collection.id}`}\n                      >\n                        <Music className=\"w-4 h-4 mr-1\" />\n                        Open\n                      </Button>\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\"\n                        className=\"border-slate-600 text-slate-300 hover:bg-slate-700\"\n                        data-testid={`button-edit-collection-${collection.id}`}\n                      >\n                        <Edit className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <Users className=\"w-12 h-12 text-slate-600 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-slate-300 mb-2\">No collections yet</h3>\n              <p className=\"text-slate-500 mb-4\">Create collections to organize your songs by genre, difficulty, or practice focus</p>\n              <Button \n                onClick={handleCreateCollection}\n                className=\"bg-blue-600 hover:bg-blue-500\" \n                data-testid=\"button-create-first-collection\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create Your First Collection\n              </Button>\n            </div>\n          )}\n        </TabsContent>\n      </Tabs>\n\n      {/* Song Details Modal */}\n      {selectedSong && (\n        <Dialog open={!!selectedSong} onOpenChange={() => setSelectedSong(null)}>\n          <DialogContent className=\"max-w-2xl bg-slate-800 border-slate-700\">\n            <DialogHeader>\n              <DialogTitle className=\"text-white text-xl\">\n                {selectedSong.title}\n              </DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <p className=\"text-slate-400 text-lg\">{selectedSong.artist}</p>\n                {selectedSong.album && (\n                  <p className=\"text-slate-500\">{selectedSong.album}</p>\n                )}\n              </div>\n              \n              <div className=\"flex flex-wrap gap-2\">\n                <Badge className={`${getDifficultyColor(selectedSong.difficulty)} text-white`}>\n                  {getDifficultyLabel(selectedSong.difficulty)}\n                </Badge>\n                {selectedSong.key && (\n                  <Badge variant=\"outline\" className=\"border-slate-600 text-slate-300\">\n                    Key: {selectedSong.key}\n                  </Badge>\n                )}\n                {selectedSong.tempo && (\n                  <Badge variant=\"outline\" className=\"border-slate-600 text-slate-300\">\n                    {selectedSong.tempo} BPM\n                  </Badge>\n                )}\n                <Badge variant=\"outline\" className=\"border-slate-600 text-slate-300\">\n                  {selectedSong.timeSignature || '4/4'}\n                </Badge>\n              </div>\n\n              {selectedSong.notes && (\n                <div>\n                  <h4 className=\"font-semibold text-white mb-2\">Practice Notes</h4>\n                  <p className=\"text-slate-300 bg-slate-900 p-3 rounded\">{selectedSong.notes}</p>\n                </div>\n              )}\n\n              <div className=\"flex gap-3 pt-4\">\n                <Button className=\"flex-1 bg-blue-600 hover:bg-blue-500\" data-testid=\"button-start-practice\">\n                  <Play className=\"w-4 h-4 mr-2\" />\n                  Start Practice Session\n                </Button>\n                <Button variant=\"outline\" className=\"border-slate-600 text-slate-300 hover:bg-slate-700\">\n                  <Heart className=\"w-4 h-4 mr-2\" />\n                  Add to Favorites\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n\n      {/* Create Collection Dialog */}\n      <Dialog open={showCreateCollection} onOpenChange={setShowCreateCollection}>\n        <DialogContent className=\"max-w-md bg-slate-800 border-slate-700\">\n          <DialogHeader>\n            <DialogTitle className=\"text-white\">Create New Collection</DialogTitle>\n          </DialogHeader>\n          <Form {...createCollectionForm}>\n            <form onSubmit={createCollectionForm.handleSubmit(onCreateCollectionSubmit)} className=\"space-y-4\">\n              <FormField\n                control={createCollectionForm.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Collection Name</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"Enter collection name...\"\n                        {...field}\n                        className=\"bg-slate-900 border-slate-700 text-white\"\n                        data-testid=\"input-collection-name\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={createCollectionForm.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Description (Optional)</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Describe your collection...\"\n                        {...field}\n                        className=\"bg-slate-900 border-slate-700 text-white\"\n                        data-testid=\"textarea-collection-description\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={createCollectionForm.control}\n                name=\"category\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Category</FormLabel>\n                    <FormControl>\n                      <Select value={field.value} onValueChange={field.onChange}>\n                        <SelectTrigger className=\"bg-slate-900 border-slate-700 text-white\" data-testid=\"select-collection-category\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent className=\"bg-slate-800 border-slate-700\">\n                          <SelectItem value=\"custom\">Custom</SelectItem>\n                          <SelectItem value=\"genre\">Genre</SelectItem>\n                          <SelectItem value=\"difficulty\">Difficulty</SelectItem>\n                          <SelectItem value=\"artist\">Artist</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex gap-3 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setShowCreateCollection(false)}\n                  className=\"flex-1 border-slate-600 text-slate-300 hover:bg-slate-700\"\n                  data-testid=\"button-cancel-collection\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={createCollectionMutation.isPending}\n                  className=\"flex-1 bg-blue-600 hover:bg-blue-500\"\n                  data-testid=\"button-submit-collection\"\n                >\n                  {createCollectionMutation.isPending ? 'Creating...' : 'Create Collection'}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":31825}},"version":1}